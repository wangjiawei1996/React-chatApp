{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _createClass from 'babel-runtime/helpers/createClass';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport React from 'react';\nimport arrayTreeFilter from 'array-tree-filter';\nimport MultiPicker from 'rmc-picker/es/MultiPicker';\nimport Picker from 'rmc-picker/lib/Picker';\n\nvar Cascader = function (_React$Component) {\n  _inherits(Cascader, _React$Component);\n\n  function Cascader() {\n    _classCallCheck(this, Cascader);\n\n    var _this = _possibleConstructorReturn(this, (Cascader.__proto__ || Object.getPrototypeOf(Cascader)).apply(this, arguments));\n\n    _this.state = {\n      value: _this.getValue(_this.props.data, _this.props.defaultValue || _this.props.value)\n    };\n\n    _this.onValueChange = function (value, index) {\n      var children = arrayTreeFilter(_this.props.data, function (c, level) {\n        return level <= index && c.value === value[level];\n      });\n      var data = children[index];\n      var i = void 0;\n\n      for (i = index + 1; data && data.children && data.children.length && i < _this.props.cols; i++) {\n        data = data.children[0];\n        value[i] = data.value;\n      }\n\n      value.length = i;\n\n      _this.setState({\n        value: value\n      });\n\n      if (_this.props.onChange) {\n        _this.props.onChange(value);\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(Cascader, [{\n    key: 'componentWillReceiveProps',\n    value: function componentWillReceiveProps(nextProps) {\n      if ('value' in nextProps) {\n        this.setState({\n          value: this.getValue(nextProps.data, nextProps.value)\n        });\n      }\n    }\n  }, {\n    key: 'getValue',\n    value: function getValue(d, val) {\n      var data = d || this.props.data;\n      var value = val || this.props.value || this.props.defaultValue;\n\n      if (!value || !value.length || value.indexOf(undefined) > -1) {\n        value = [];\n\n        for (var i = 0; i < this.props.cols; i++) {\n          if (data && data.length) {\n            value[i] = data[0].value;\n            data = data[0].children;\n          }\n        }\n      }\n\n      return value;\n    }\n  }, {\n    key: 'getCols',\n    value: function getCols() {\n      var _props = this.props,\n          data = _props.data,\n          cols = _props.cols,\n          pickerPrefixCls = _props.pickerPrefixCls,\n          disabled = _props.disabled,\n          pickerItemStyle = _props.pickerItemStyle,\n          indicatorStyle = _props.indicatorStyle;\n      var value = this.state.value;\n      var childrenTree = arrayTreeFilter(data, function (c, level) {\n        return c.value === value[level];\n      }).map(function (c) {\n        return c.children;\n      });\n      var needPad = cols - childrenTree.length;\n\n      if (needPad > 0) {\n        for (var i = 0; i < needPad; i++) {\n          childrenTree.push([]);\n        }\n      }\n\n      childrenTree.length = cols - 1;\n      childrenTree.unshift(data);\n      return childrenTree.map(function () {\n        var children = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n        var level = arguments[1];\n        return React.createElement(Picker, {\n          key: level,\n          prefixCls: pickerPrefixCls,\n          style: {\n            flex: 1\n          },\n          disabled: disabled,\n          itemStyle: pickerItemStyle,\n          indicatorStyle: indicatorStyle\n        }, children.map(function (item) {\n          return React.createElement(Picker.Item, {\n            value: item.value,\n            key: item.value\n          }, item.label);\n        }));\n      });\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var props = this.props;\n      var prefixCls = props.prefixCls,\n          className = props.className,\n          rootNativeProps = props.rootNativeProps,\n          style = props.style;\n      var cols = this.getCols();\n\n      var multiStyle = _extends({\n        flexDirection: 'row',\n        alignItems: 'center'\n      }, style);\n\n      return React.createElement(MultiPicker, {\n        style: multiStyle,\n        prefixCls: prefixCls,\n        className: className,\n        selectedValue: this.state.value,\n        rootNativeProps: rootNativeProps,\n        onValueChange: this.onValueChange,\n        onScrollChange: props.onScrollChange\n      }, cols);\n    }\n  }]);\n\n  return Cascader;\n}(React.Component);\n\nCascader.defaultProps = {\n  cols: 3,\n  prefixCls: 'rmc-cascader',\n  pickerPrefixCls: 'rmc-picker',\n  data: [],\n  disabled: false\n};\nexport default Cascader;","map":null,"metadata":{},"sourceType":"module"}