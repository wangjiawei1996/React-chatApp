{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport React from 'react';\nimport Animate from 'rc-animate';\nimport TimePicker from './TimePicker';\nimport DatePicker from './DatePicker';\nimport ConfirmPanel from './calendar/ConfirmPanel';\nimport ShortcutPanel from './calendar/ShortcutPanel';\nimport AnimateWrapper from './calendar/AnimateWrapper';\nimport Header from './calendar/Header';\nimport { mergeDateTime } from './util';\nimport defaultLocale from './locale/zh_CN';\nexport var StateType = function StateType() {\n  _classCallCheck(this, StateType);\n\n  this.showTimePicker = false;\n  this.startDate = undefined;\n  this.endDate = undefined;\n  this.disConfirmBtn = true;\n  this.clientHight = 0;\n};\n\nvar Calendar = function (_React$PureComponent) {\n  _inherits(Calendar, _React$PureComponent);\n\n  function Calendar(props) {\n    _classCallCheck(this, Calendar);\n\n    var _this = _possibleConstructorReturn(this, _React$PureComponent.call(this, props));\n\n    _this.selectDate = function (date) {\n      var useDateTime = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var oldState = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      var props = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : _this.props;\n      if (!date) return {};\n      var newState = {};\n      var type = props.type,\n          pickTime = props.pickTime,\n          defaultTimeValue = props.defaultTimeValue,\n          _props$locale = props.locale,\n          locale = _props$locale === undefined ? {} : _props$locale;\n      var newDate = pickTime && !useDateTime ? mergeDateTime(date, defaultTimeValue) : date;\n      var startDate = oldState.startDate,\n          endDate = oldState.endDate;\n\n      switch (type) {\n        case 'one':\n          newState = _extends({}, newState, {\n            startDate: newDate,\n            disConfirmBtn: false\n          });\n\n          if (pickTime) {\n            newState = _extends({}, newState, {\n              timePickerTitle: locale.selectTime,\n              showTimePicker: true\n            });\n          }\n\n          break;\n\n        case 'range':\n          if (!startDate || endDate) {\n            newState = _extends({}, newState, {\n              startDate: newDate,\n              endDate: undefined,\n              disConfirmBtn: true\n            });\n\n            if (pickTime) {\n              newState = _extends({}, newState, {\n                timePickerTitle: locale.selectStartTime,\n                showTimePicker: true\n              });\n            }\n          } else {\n            newState = _extends({}, newState, {\n              timePickerTitle: +newDate >= +startDate ? locale.selectEndTime : locale.selectStartTime,\n              disConfirmBtn: false,\n              endDate: pickTime && !useDateTime && +newDate >= +startDate ? new Date(+mergeDateTime(newDate, startDate) + 3600000) : newDate\n            });\n          }\n\n          break;\n      }\n\n      return newState;\n    };\n\n    _this.onSelectedDate = function (date) {\n      var _this$state = _this.state,\n          startDate = _this$state.startDate,\n          endDate = _this$state.endDate;\n      var onSelect = _this.props.onSelect;\n\n      if (onSelect) {\n        var value = onSelect(date, [startDate, endDate]);\n\n        if (value) {\n          _this.shortcutSelect(value[0], value[1]);\n\n          return;\n        }\n      }\n\n      _this.setState(_this.selectDate(date, false, {\n        startDate: startDate,\n        endDate: endDate\n      }));\n    };\n\n    _this.onSelectHasDisableDate = function (date) {\n      _this.onClear();\n\n      if (_this.props.onSelectHasDisableDate) {\n        _this.props.onSelectHasDisableDate(date);\n      }\n    };\n\n    _this.onClose = function () {\n      _this.setState(new StateType());\n    };\n\n    _this.onCancel = function () {\n      _this.props.onCancel && _this.props.onCancel();\n\n      _this.onClose();\n    };\n\n    _this.onConfirm = function () {\n      var onConfirm = _this.props.onConfirm;\n      var _this$state2 = _this.state,\n          startDate = _this$state2.startDate,\n          endDate = _this$state2.endDate;\n\n      if (startDate && endDate && +startDate > +endDate) {\n        return onConfirm && onConfirm(endDate, startDate);\n      }\n\n      onConfirm && onConfirm(startDate, endDate);\n\n      _this.onClose();\n    };\n\n    _this.onTimeChange = function (date) {\n      var _this$state3 = _this.state,\n          startDate = _this$state3.startDate,\n          endDate = _this$state3.endDate;\n\n      if (endDate) {\n        _this.setState({\n          endDate: date\n        });\n      } else if (startDate) {\n        _this.setState({\n          startDate: date\n        });\n      }\n    };\n\n    _this.onClear = function () {\n      _this.setState({\n        startDate: undefined,\n        endDate: undefined,\n        showTimePicker: false\n      });\n\n      _this.props.onClear && _this.props.onClear();\n    };\n\n    _this.shortcutSelect = function (startDate, endDate) {\n      var props = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _this.props;\n\n      _this.setState(_extends({\n        startDate: startDate\n      }, _this.selectDate(endDate, true, {\n        startDate: startDate\n      }, props), {\n        showTimePicker: false\n      }));\n    };\n\n    _this.setClientHeight = function (height) {\n      _this.setState({\n        clientHight: height\n      });\n    };\n\n    _this.state = new StateType();\n\n    if (props.defaultValue) {\n      var defaultValue = props.defaultValue;\n      _this.state = _extends({}, _this.state, _this.selectDate(defaultValue[1], true, {\n        startDate: defaultValue[0]\n      }, props));\n    }\n\n    return _this;\n  }\n\n  Calendar.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {\n    if (!this.props.visible && nextProps.visible && nextProps.defaultValue) {\n      this.shortcutSelect(nextProps.defaultValue[0], nextProps.defaultValue[1], nextProps);\n    }\n  };\n\n  Calendar.prototype.render = function render() {\n    var _props = this.props,\n        type = _props.type,\n        _props$locale2 = _props.locale,\n        locale = _props$locale2 === undefined ? {} : _props$locale2,\n        prefixCls = _props.prefixCls,\n        visible = _props.visible,\n        pickTime = _props.pickTime,\n        showShortcut = _props.showShortcut,\n        renderHeader = _props.renderHeader,\n        infiniteOpt = _props.infiniteOpt,\n        initalMonths = _props.initalMonths,\n        defaultDate = _props.defaultDate,\n        minDate = _props.minDate,\n        maxDate = _props.maxDate,\n        getDateExtra = _props.getDateExtra,\n        rowSize = _props.rowSize,\n        defaultTimeValue = _props.defaultTimeValue,\n        renderShortcut = _props.renderShortcut,\n        enterDirection = _props.enterDirection,\n        timePickerPrefixCls = _props.timePickerPrefixCls,\n        timePickerPickerPrefixCls = _props.timePickerPickerPrefixCls,\n        style = _props.style;\n    var _state = this.state,\n        showTimePicker = _state.showTimePicker,\n        timePickerTitle = _state.timePickerTitle,\n        startDate = _state.startDate,\n        endDate = _state.endDate,\n        disConfirmBtn = _state.disConfirmBtn,\n        clientHight = _state.clientHight;\n    var headerProps = {\n      locale: locale,\n      showClear: !!startDate,\n      onCancel: this.onCancel,\n      onClear: this.onClear\n    };\n    return React.createElement('div', {\n      className: '' + prefixCls,\n      style: style\n    }, React.createElement(Animate, {\n      showProp: 'visible',\n      transitionName: 'fade'\n    }, React.createElement(AnimateWrapper, {\n      className: 'mask',\n      visible: !!visible\n    })), React.createElement(Animate, {\n      showProp: 'visible',\n      transitionName: enterDirection === 'horizontal' ? 'slideH' : 'slideV'\n    }, React.createElement(AnimateWrapper, {\n      className: 'content',\n      visible: !!visible\n    }, renderHeader ? renderHeader(headerProps) : React.createElement(Header, headerProps), React.createElement(DatePicker, {\n      locale: locale,\n      type: type,\n      prefixCls: prefixCls,\n      infiniteOpt: infiniteOpt,\n      initalMonths: initalMonths,\n      defaultDate: defaultDate,\n      minDate: minDate,\n      maxDate: maxDate,\n      getDateExtra: getDateExtra,\n      onCellClick: this.onSelectedDate,\n      onSelectHasDisableDate: this.onSelectHasDisableDate,\n      onLayout: this.setClientHeight,\n      startDate: startDate,\n      endDate: endDate,\n      rowSize: rowSize\n    }), showTimePicker && React.createElement(TimePicker, {\n      prefixCls: timePickerPrefixCls,\n      pickerPrefixCls: timePickerPickerPrefixCls,\n      locale: locale,\n      title: timePickerTitle,\n      defaultValue: defaultTimeValue,\n      value: endDate ? endDate : startDate,\n      onValueChange: this.onTimeChange,\n      minDate: minDate,\n      maxDate: maxDate,\n      clientHeight: clientHight\n    }), showShortcut && !showTimePicker && (renderShortcut ? renderShortcut(this.shortcutSelect) : React.createElement(ShortcutPanel, {\n      locale: locale,\n      onSelect: this.shortcutSelect\n    })), startDate && React.createElement(ConfirmPanel, {\n      type: type,\n      locale: locale,\n      startDateTime: startDate,\n      endDateTime: endDate,\n      onConfirm: this.onConfirm,\n      disableBtn: disConfirmBtn,\n      formatStr: pickTime ? locale.dateTimeFormat : locale.dateFormat\n    }))));\n  };\n\n  return Calendar;\n}(React.PureComponent);\n\nexport default Calendar;\nCalendar.DefaultHeader = Header;\nCalendar.DefaultShortcut = ShortcutPanel;\nCalendar.defaultProps = {\n  visible: false,\n  showHeader: true,\n  locale: defaultLocale,\n  pickTime: false,\n  showShortcut: false,\n  prefixCls: 'rmc-calendar',\n  type: 'range',\n  defaultTimeValue: new Date(2000, 0, 1, 8)\n};","map":null,"metadata":{},"sourceType":"module"}