{"ast":null,"code":"import _defineProperty from 'babel-runtime/helpers/defineProperty';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _createClass from 'babel-runtime/helpers/createClass';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\n/* tslint:disable:jsx-no-multiline-js */\n\nimport classnames from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { getComponentLocale } from '../_util/getLocale';\nimport Button from '../button';\nimport Flex from '../flex';\n\nvar Pagination = function (_React$Component) {\n  _inherits(Pagination, _React$Component);\n\n  function Pagination(props) {\n    _classCallCheck(this, Pagination);\n\n    var _this = _possibleConstructorReturn(this, (Pagination.__proto__ || Object.getPrototypeOf(Pagination)).call(this, props));\n\n    _this.state = {\n      current: props.current\n    };\n    return _this;\n  }\n\n  _createClass(Pagination, [{\n    key: 'componentWillReceiveProps',\n    value: function componentWillReceiveProps(nextProps) {\n      if (nextProps.current !== this.state.current) {\n        this.setState({\n          current: nextProps.current\n        });\n      }\n    }\n  }, {\n    key: 'onChange',\n    value: function onChange(p) {\n      this.setState({\n        current: p\n      });\n\n      if (this.props.onChange) {\n        this.props.onChange(p);\n      }\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this2 = this;\n\n      var _props = this.props,\n          prefixCls = _props.prefixCls,\n          className = _props.className,\n          style = _props.style,\n          mode = _props.mode,\n          total = _props.total,\n          simple = _props.simple;\n      var current = this.state.current;\n      var locale = getComponentLocale(this.props, this.context, 'Pagination', function () {\n        return require('./locale/zh_CN');\n      });\n      var prevText = locale.prevText,\n          nextText = locale.nextText;\n      var markup = React.createElement(Flex, null, React.createElement(Flex.Item, {\n        className: prefixCls + '-wrap-btn ' + prefixCls + '-wrap-btn-prev'\n      }, React.createElement(Button, {\n        inline: true,\n        disabled: current <= 1,\n        onClick: function onClick() {\n          return _this2.onChange(current - 1);\n        }\n      }, prevText)), this.props.children ? React.createElement(Flex.Item, null, this.props.children) : !simple && React.createElement(Flex.Item, {\n        className: prefixCls + '-wrap',\n        'aria-live': 'assertive'\n      }, React.createElement('span', {\n        className: 'active'\n      }, current), '/', React.createElement('span', null, total)), React.createElement(Flex.Item, {\n        className: prefixCls + '-wrap-btn ' + prefixCls + '-wrap-btn-next'\n      }, React.createElement(Button, {\n        inline: true,\n        disabled: current >= total,\n        onClick: function onClick() {\n          return _this2.onChange(_this2.state.current + 1);\n        }\n      }, nextText)));\n\n      if (mode === 'number') {\n        markup = React.createElement('div', {\n          className: prefixCls + '-wrap'\n        }, React.createElement('span', {\n          className: 'active'\n        }, current), '/', React.createElement('span', null, total));\n      } else if (mode === 'pointer') {\n        var arr = [];\n\n        for (var i = 0; i < total; i++) {\n          arr.push(React.createElement('div', {\n            key: 'dot-' + i,\n            className: classnames(prefixCls + '-wrap-dot', _defineProperty({}, prefixCls + '-wrap-dot-active', i + 1 === current))\n          }, React.createElement('span', null)));\n        }\n\n        markup = React.createElement('div', {\n          className: prefixCls + '-wrap'\n        }, arr);\n      }\n\n      var cls = classnames(prefixCls, className);\n      return React.createElement('div', {\n        className: cls,\n        style: style\n      }, markup);\n    }\n  }]);\n\n  return Pagination;\n}(React.Component);\n\nexport default Pagination;\nPagination.defaultProps = {\n  prefixCls: 'am-pagination',\n  mode: 'button',\n  current: 1,\n  total: 0,\n  simple: false,\n  onChange: function onChange() {}\n};\nPagination.contextTypes = {\n  antLocale: PropTypes.object\n};","map":null,"metadata":{},"sourceType":"module"}