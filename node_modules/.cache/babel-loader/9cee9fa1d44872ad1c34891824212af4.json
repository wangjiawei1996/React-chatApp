{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _createClass from 'babel-runtime/helpers/createClass';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n/* tslint:disable:jsx-no-multiline-js */\n\n\nimport treeFilter from 'array-tree-filter';\nimport React from 'react';\nimport RMCCascader from 'rmc-cascader/es/Cascader';\nimport RMCPopupCascader from 'rmc-cascader/es/Popup';\nimport RMCMultiPicker from 'rmc-picker/es/MultiPicker';\nimport RMCPicker from 'rmc-picker/es/Picker';\nimport { getComponentLocale } from '../_util/getLocale';\nexport function getDefaultProps() {\n  var defaultFormat = function defaultFormat(values) {\n    // label is JSX.Element or other\n    if (values.length > 0 && typeof values[0] !== 'string') {\n      return values;\n    }\n\n    return values.join(',');\n  };\n\n  return {\n    triggerType: 'onClick',\n    prefixCls: 'am-picker',\n    pickerPrefixCls: 'am-picker-col',\n    popupPrefixCls: 'am-picker-popup',\n    format: defaultFormat,\n    cols: 3,\n    cascade: true,\n    title: ''\n  };\n}\n\nvar AbstractPicker = function (_React$Component) {\n  _inherits(AbstractPicker, _React$Component);\n\n  function AbstractPicker() {\n    _classCallCheck(this, AbstractPicker);\n\n    var _this = _possibleConstructorReturn(this, (AbstractPicker.__proto__ || Object.getPrototypeOf(AbstractPicker)).apply(this, arguments));\n\n    _this.getSel = function () {\n      var value = _this.props.value || [];\n      var treeChildren = void 0;\n      var data = _this.props.data;\n\n      if (_this.props.cascade) {\n        treeChildren = treeFilter(data, function (c, level) {\n          return c.value === value[level];\n        });\n      } else {\n        treeChildren = value.map(function (v, i) {\n          return data[i].filter(function (d) {\n            return d.value === v;\n          })[0];\n        });\n      }\n\n      return _this.props.format && _this.props.format(treeChildren.map(function (v) {\n        return v.label;\n      }));\n    };\n\n    _this.getPickerCol = function () {\n      var _this$props = _this.props,\n          data = _this$props.data,\n          pickerPrefixCls = _this$props.pickerPrefixCls,\n          itemStyle = _this$props.itemStyle,\n          indicatorStyle = _this$props.indicatorStyle;\n      return data.map(function (col, index) {\n        return React.createElement(RMCPicker, {\n          key: index,\n          prefixCls: pickerPrefixCls,\n          style: {\n            flex: 1\n          },\n          itemStyle: itemStyle,\n          indicatorStyle: indicatorStyle\n        }, col.map(function (item) {\n          return React.createElement(RMCPicker.Item, {\n            key: item.value,\n            value: item.value\n          }, item.label);\n        }));\n      });\n    };\n\n    _this.onOk = function (v) {\n      if (_this.scrollValue !== undefined) {\n        v = _this.scrollValue;\n      }\n\n      if (_this.props.onChange) {\n        _this.props.onChange(v);\n      }\n\n      if (_this.props.onOk) {\n        _this.props.onOk(v);\n      }\n    };\n\n    _this.setScrollValue = function (v) {\n      _this.scrollValue = v;\n    };\n\n    _this.setCasecadeScrollValue = function (v) {\n      // 级联情况下保证数据正确性，滚动过程中只有当最后一级变化时才变更数据\n      if (v && _this.scrollValue) {\n        var length = _this.scrollValue.length;\n\n        if (length === v.length && _this.scrollValue[length - 1] === v[length - 1]) {\n          return;\n        }\n      }\n\n      _this.setScrollValue(v);\n    };\n\n    _this.fixOnOk = function (cascader) {\n      if (cascader && cascader.onOk !== _this.onOk) {\n        cascader.onOk = _this.onOk;\n        cascader.forceUpdate();\n      }\n    };\n\n    _this.onPickerChange = function (v) {\n      _this.setScrollValue(v);\n\n      if (_this.props.onPickerChange) {\n        _this.props.onPickerChange(v);\n      }\n    };\n\n    _this.onVisibleChange = function (visible) {\n      _this.setScrollValue(undefined);\n\n      if (_this.props.onVisibleChange) {\n        _this.props.onVisibleChange(visible);\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(AbstractPicker, [{\n    key: 'render',\n    value: function render() {\n      var _a = this.props,\n          children = _a.children,\n          _a$value = _a.value,\n          value = _a$value === undefined ? [] : _a$value,\n          popupPrefixCls = _a.popupPrefixCls,\n          itemStyle = _a.itemStyle,\n          indicatorStyle = _a.indicatorStyle,\n          okText = _a.okText,\n          dismissText = _a.dismissText,\n          extra = _a.extra,\n          cascade = _a.cascade,\n          prefixCls = _a.prefixCls,\n          pickerPrefixCls = _a.pickerPrefixCls,\n          data = _a.data,\n          cols = _a.cols,\n          onOk = _a.onOk,\n          restProps = __rest(_a, [\"children\", \"value\", \"popupPrefixCls\", \"itemStyle\", \"indicatorStyle\", \"okText\", \"dismissText\", \"extra\", \"cascade\", \"prefixCls\", \"pickerPrefixCls\", \"data\", \"cols\", \"onOk\"]); // tslint:disable-next-line:variable-name\n\n\n      var _locale = getComponentLocale(this.props, this.context, 'Picker', function () {\n        return require('./locale/zh_CN');\n      });\n\n      var cascader = void 0;\n      var popupMoreProps = {};\n\n      if (cascade) {\n        cascader = React.createElement(RMCCascader, {\n          prefixCls: prefixCls,\n          pickerPrefixCls: pickerPrefixCls,\n          data: data,\n          cols: cols,\n          onChange: this.onPickerChange,\n          onScrollChange: this.setCasecadeScrollValue,\n          pickerItemStyle: itemStyle,\n          indicatorStyle: indicatorStyle\n        });\n      } else {\n        cascader = React.createElement(RMCMultiPicker, {\n          style: {\n            flexDirection: 'row',\n            alignItems: 'center'\n          },\n          prefixCls: prefixCls,\n          onScrollChange: this.setScrollValue\n        }, this.getPickerCol());\n        popupMoreProps = {\n          pickerValueProp: 'selectedValue',\n          pickerValueChangeProp: 'onValueChange'\n        };\n      }\n\n      return React.createElement(RMCPopupCascader, _extends({\n        cascader: cascader\n      }, this.popupProps, restProps, {\n        prefixCls: popupPrefixCls,\n        value: value,\n        dismissText: dismissText || _locale.dismissText,\n        okText: okText || _locale.okText\n      }, popupMoreProps, {\n        ref: this.fixOnOk,\n        onVisibleChange: this.onVisibleChange\n      }), children && typeof children !== 'string' && React.isValidElement(children) && React.cloneElement(children, {\n        extra: this.getSel() || extra || _locale.extra\n      }));\n    }\n  }]);\n\n  return AbstractPicker;\n}(React.Component);\n\nexport default AbstractPicker;","map":null,"metadata":{},"sourceType":"module"}