{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport _defineProperty from 'babel-runtime/helpers/defineProperty';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _createClass from 'babel-runtime/helpers/createClass';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n/* tslint:disable:jsx-no-multiline-js */\n\n\nimport classnames from 'classnames';\nimport React from 'react';\nimport TouchFeedback from 'rmc-feedback';\nexport var Brief = function (_React$Component) {\n  _inherits(Brief, _React$Component);\n\n  function Brief() {\n    _classCallCheck(this, Brief);\n\n    return _possibleConstructorReturn(this, (Brief.__proto__ || Object.getPrototypeOf(Brief)).apply(this, arguments));\n  }\n\n  _createClass(Brief, [{\n    key: 'render',\n    value: function render() {\n      return React.createElement('div', {\n        className: 'am-list-brief',\n        style: this.props.style\n      }, this.props.children);\n    }\n  }]);\n\n  return Brief;\n}(React.Component);\n\nvar ListItem = function (_React$Component2) {\n  _inherits(ListItem, _React$Component2);\n\n  function ListItem(props) {\n    _classCallCheck(this, ListItem);\n\n    var _this2 = _possibleConstructorReturn(this, (ListItem.__proto__ || Object.getPrototypeOf(ListItem)).call(this, props));\n\n    _this2.onClick = function (ev) {\n      var _this2$props = _this2.props,\n          onClick = _this2$props.onClick,\n          platform = _this2$props.platform;\n      var isAndroid = platform === 'android';\n\n      if (!!onClick && isAndroid) {\n        if (_this2.debounceTimeout) {\n          clearTimeout(_this2.debounceTimeout);\n          _this2.debounceTimeout = null;\n        }\n\n        var Item = ev.currentTarget;\n        var RippleWidth = Math.max(Item.offsetHeight, Item.offsetWidth);\n        var ClientRect = ev.currentTarget.getBoundingClientRect();\n        var pointX = ev.clientX - ClientRect.left - Item.offsetWidth / 2;\n        var pointY = ev.clientY - ClientRect.top - Item.offsetWidth / 2;\n        var coverRippleStyle = {\n          width: RippleWidth + 'px',\n          height: RippleWidth + 'px',\n          left: pointX + 'px',\n          top: pointY + 'px'\n        };\n\n        _this2.setState({\n          coverRippleStyle: coverRippleStyle,\n          RippleClicked: true\n        }, function () {\n          _this2.debounceTimeout = setTimeout(function () {\n            _this2.setState({\n              coverRippleStyle: {\n                display: 'none'\n              },\n              RippleClicked: false\n            });\n          }, 1000);\n        });\n      }\n\n      if (onClick) {\n        onClick(ev);\n      }\n    };\n\n    _this2.state = {\n      coverRippleStyle: {\n        display: 'none'\n      },\n      RippleClicked: false\n    };\n    return _this2;\n  }\n\n  _createClass(ListItem, [{\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      if (this.debounceTimeout) {\n        clearTimeout(this.debounceTimeout);\n        this.debounceTimeout = null;\n      }\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _classnames,\n          _classnames3,\n          _classnames4,\n          _this3 = this;\n\n      var _a = this.props,\n          prefixCls = _a.prefixCls,\n          className = _a.className,\n          activeStyle = _a.activeStyle,\n          error = _a.error,\n          align = _a.align,\n          wrap = _a.wrap,\n          disabled = _a.disabled,\n          children = _a.children,\n          multipleLine = _a.multipleLine,\n          thumb = _a.thumb,\n          extra = _a.extra,\n          arrow = _a.arrow,\n          onClick = _a.onClick,\n          restProps = __rest(_a, [\"prefixCls\", \"className\", \"activeStyle\", \"error\", \"align\", \"wrap\", \"disabled\", \"children\", \"multipleLine\", \"thumb\", \"extra\", \"arrow\", \"onClick\"]);\n\n      var platform = restProps.platform,\n          otherProps = __rest(restProps, [\"platform\"]);\n\n      var _state = this.state,\n          coverRippleStyle = _state.coverRippleStyle,\n          RippleClicked = _state.RippleClicked;\n      var wrapCls = classnames(prefixCls + '-item', className, (_classnames = {}, _defineProperty(_classnames, prefixCls + '-item-disabled', disabled), _defineProperty(_classnames, prefixCls + '-item-error', error), _defineProperty(_classnames, prefixCls + '-item-top', align === 'top'), _defineProperty(_classnames, prefixCls + '-item-middle', align === 'middle'), _defineProperty(_classnames, prefixCls + '-item-bottom', align === 'bottom'), _classnames));\n      var rippleCls = classnames(prefixCls + '-ripple', _defineProperty({}, prefixCls + '-ripple-animate', RippleClicked));\n      var lineCls = classnames(prefixCls + '-line', (_classnames3 = {}, _defineProperty(_classnames3, prefixCls + '-line-multiple', multipleLine), _defineProperty(_classnames3, prefixCls + '-line-wrap', wrap), _classnames3));\n      var arrowCls = classnames(prefixCls + '-arrow', (_classnames4 = {}, _defineProperty(_classnames4, prefixCls + '-arrow-horizontal', arrow === 'horizontal'), _defineProperty(_classnames4, prefixCls + '-arrow-vertical', arrow === 'down' || arrow === 'up'), _defineProperty(_classnames4, prefixCls + '-arrow-vertical-up', arrow === 'up'), _classnames4));\n      var content = React.createElement('div', _extends({}, otherProps, {\n        onClick: function onClick(ev) {\n          _this3.onClick(ev);\n        },\n        className: wrapCls\n      }), thumb ? React.createElement('div', {\n        className: prefixCls + '-thumb'\n      }, typeof thumb === 'string' ? React.createElement('img', {\n        src: thumb\n      }) : thumb) : null, React.createElement('div', {\n        className: lineCls\n      }, children !== undefined && React.createElement('div', {\n        className: prefixCls + '-content'\n      }, children), extra !== undefined && React.createElement('div', {\n        className: prefixCls + '-extra'\n      }, extra), arrow && React.createElement('div', {\n        className: arrowCls,\n        'aria-hidden': 'true'\n      })), React.createElement('div', {\n        style: coverRippleStyle,\n        className: rippleCls\n      }));\n      var touchProps = {};\n      Object.keys(otherProps).forEach(function (key) {\n        if (/onTouch/i.test(key)) {\n          touchProps[key] = otherProps[key];\n          delete otherProps[key];\n        }\n      });\n      return React.createElement(TouchFeedback, _extends({}, touchProps, {\n        disabled: disabled || !onClick,\n        activeStyle: activeStyle,\n        activeClassName: prefixCls + '-item-active'\n      }), content);\n    }\n  }]);\n\n  return ListItem;\n}(React.Component);\n\nListItem.defaultProps = {\n  prefixCls: 'am-list',\n  align: 'middle',\n  error: false,\n  multipleLine: false,\n  wrap: false,\n  platform: 'ios'\n};\nListItem.Brief = Brief;\nexport default ListItem;","map":null,"metadata":{},"sourceType":"module"}