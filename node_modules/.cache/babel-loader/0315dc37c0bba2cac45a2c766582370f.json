{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport _defineProperty from 'babel-runtime/helpers/defineProperty';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _createClass from 'babel-runtime/helpers/createClass';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport Gesture from 'rc-gesture';\nimport classnames from 'classnames'; // https://developer.mozilla.org/en-US/docs/Web/API/Element/matches\n// http://caniuse.com/#search=match\n\nfunction closest(el, selector) {\n  var matchesSelector = el.matches || el.webkitMatchesSelector || el.mozMatchesSelector || el.msMatchesSelector;\n\n  while (el) {\n    if (matchesSelector.call(el, selector)) {\n      return el;\n    } else {\n      el = el.parentElement;\n    }\n  }\n\n  return null;\n}\n\nvar Swipeout = function (_React$Component) {\n  _inherits(Swipeout, _React$Component);\n\n  function Swipeout(props) {\n    _classCallCheck(this, Swipeout);\n\n    var _this = _possibleConstructorReturn(this, (Swipeout.__proto__ || Object.getPrototypeOf(Swipeout)).call(this, props));\n\n    _this.onCloseSwipe = function (ev) {\n      if (!(_this.openedLeft || _this.openedRight)) {\n        return;\n      }\n\n      var pNode = closest(ev.target, '.' + _this.props.prefixCls + '-actions');\n\n      if (!pNode) {\n        ev.preventDefault();\n\n        _this.close();\n      }\n    };\n\n    _this.onPanStart = function (e) {\n      var direction = e.direction,\n          moveStatus = e.moveStatus;\n      var deltaX = moveStatus.x; // http://hammerjs.github.io/api/#directions\n\n      var isLeft = direction === 2;\n      var isRight = direction === 4;\n\n      if (!isLeft && !isRight) {\n        return;\n      }\n\n      var _this$props = _this.props,\n          left = _this$props.left,\n          right = _this$props.right;\n      _this.needShowRight = isLeft && right.length > 0;\n      _this.needShowLeft = isRight && left.length > 0;\n\n      if (_this.left) {\n        _this.left.style.visibility = _this.needShowRight ? 'hidden' : 'visible';\n      }\n\n      if (_this.right) {\n        _this.right.style.visibility = _this.needShowLeft ? 'hidden' : 'visible';\n      }\n\n      if (_this.needShowLeft || _this.needShowRight) {\n        _this.swiping = true;\n\n        _this.setState({\n          swiping: _this.swiping\n        });\n\n        _this._setStyle(deltaX);\n      }\n    };\n\n    _this.onPanMove = function (e) {\n      var moveStatus = e.moveStatus,\n          srcEvent = e.srcEvent;\n      var deltaX = moveStatus.x;\n\n      if (!_this.swiping) {\n        return;\n      } // fixed scroll when it's pan and moving.\n\n\n      if (srcEvent && srcEvent.preventDefault) {\n        srcEvent.preventDefault();\n      }\n\n      _this._setStyle(deltaX);\n    };\n\n    _this.onPanEnd = function (e) {\n      if (!_this.swiping) {\n        return;\n      }\n\n      var moveStatus = e.moveStatus;\n      var deltaX = moveStatus.x;\n      var needOpenRight = _this.needShowRight && Math.abs(deltaX) > _this.btnsRightWidth / 2;\n      var needOpenLeft = _this.needShowLeft && Math.abs(deltaX) > _this.btnsLeftWidth / 2;\n\n      if (needOpenRight) {\n        _this.doOpenRight();\n      } else if (needOpenLeft) {\n        _this.doOpenLeft();\n      } else {\n        _this.close();\n      }\n\n      _this.swiping = false;\n\n      _this.setState({\n        swiping: _this.swiping\n      });\n\n      _this.needShowLeft = false;\n      _this.needShowRight = false;\n    };\n\n    _this.doOpenLeft = function () {\n      _this.open(_this.btnsLeftWidth, true, false);\n    };\n\n    _this.doOpenRight = function () {\n      _this.open(-_this.btnsRightWidth, true, false);\n    }; // set content & actions style\n\n\n    _this._setStyle = function (value) {\n      var limit = value > 0 ? _this.btnsLeftWidth : -_this.btnsRightWidth;\n\n      var contentLeft = _this._getContentEasing(value, limit);\n\n      _this.content.style.left = contentLeft + 'px';\n\n      if (_this.cover) {\n        _this.cover.style.display = Math.abs(value) > 0 ? 'block' : 'none';\n        _this.cover.style.left = contentLeft + 'px';\n      }\n    };\n\n    _this.open = function (value, openedLeft, openedRight) {\n      if (!_this.openedLeft && !_this.openedRight && _this.props.onOpen) {\n        _this.props.onOpen();\n      }\n\n      _this.openedLeft = openedLeft;\n      _this.openedRight = openedRight;\n\n      _this._setStyle(value);\n    };\n\n    _this.close = function () {\n      if ((_this.openedLeft || _this.openedRight) && _this.props.onClose) {\n        _this.props.onClose();\n      }\n\n      _this._setStyle(0);\n\n      _this.openedLeft = false;\n      _this.openedRight = false;\n    };\n\n    _this.onTouchMove = function (e) {\n      if (_this.swiping) {\n        e.preventDefault();\n      }\n    };\n\n    _this.state = {\n      swiping: false\n    };\n    _this.openedLeft = false;\n    _this.openedRight = false;\n    return _this;\n  }\n\n  _createClass(Swipeout, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      this.btnsLeftWidth = this.left ? this.left.offsetWidth : 0;\n      this.btnsRightWidth = this.right ? this.right.offsetWidth : 0;\n      document.body.addEventListener('touchstart', this.onCloseSwipe, true);\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      document.body.removeEventListener('touchstart', this.onCloseSwipe, true);\n    } // left & right button click\n\n  }, {\n    key: 'onBtnClick',\n    value: function onBtnClick(ev, btn) {\n      var onPress = btn.onPress;\n\n      if (onPress) {\n        onPress(ev);\n      }\n\n      if (this.props.autoClose) {\n        this.close();\n      }\n    }\n  }, {\n    key: '_getContentEasing',\n    value: function _getContentEasing(value, limit) {\n      // limit content style left when value > actions width\n      var delta = Math.abs(value) - Math.abs(limit);\n      var isOverflow = delta > 0;\n      var factor = limit > 0 ? 1 : -1;\n\n      if (isOverflow) {\n        value = limit + Math.pow(delta, 0.85) * factor;\n        return Math.abs(value) > Math.abs(limit) ? limit : value;\n      }\n\n      return value;\n    }\n  }, {\n    key: 'renderButtons',\n    value: function renderButtons(buttons, _ref) {\n      var _this2 = this;\n\n      var prefixCls = this.props.prefixCls;\n      return buttons && buttons.length ? React.createElement('div', {\n        className: prefixCls + '-actions ' + prefixCls + '-actions-' + _ref,\n        ref: function ref(el) {\n          return _this2[_ref] = el;\n        }\n      }, buttons.map(function (btn, i) {\n        return React.createElement('div', {\n          key: i,\n          className: prefixCls + '-btn ' + (btn.hasOwnProperty('className') ? btn.className : ''),\n          style: btn.style,\n          role: 'button',\n          onClick: function onClick(e) {\n            return _this2.onBtnClick(e, btn);\n          }\n        }, React.createElement('div', {\n          className: prefixCls + '-btn-text'\n        }, btn.text || 'Click'));\n      })) : null;\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this3 = this;\n\n      var _a = this.props,\n          prefixCls = _a.prefixCls,\n          left = _a.left,\n          right = _a.right,\n          disabled = _a.disabled,\n          children = _a.children,\n          restProps = __rest(_a, [\"prefixCls\", \"left\", \"right\", \"disabled\", \"children\"]);\n\n      var autoClose = restProps.autoClose,\n          onOpen = restProps.onOpen,\n          onClose = restProps.onClose,\n          divProps = __rest(restProps, [\"autoClose\", \"onOpen\", \"onClose\"]);\n\n      var cls = classnames(prefixCls, _defineProperty({}, prefixCls + '-swiping', this.state.swiping));\n      var refProps = {\n        ref: function ref(el) {\n          return _this3.content = ReactDOM.findDOMNode(el);\n        }\n      };\n      return (left.length || right.length) && !disabled ? React.createElement('div', _extends({\n        className: cls\n      }, divProps), React.createElement('div', {\n        className: prefixCls + '-cover',\n        ref: function ref(el) {\n          return _this3.cover = el;\n        }\n      }), this.renderButtons(left, 'left'), this.renderButtons(right, 'right'), React.createElement(Gesture, _extends({\n        onTouchMove: this.onTouchMove,\n        onPanStart: this.onPanStart,\n        onPanMove: this.onPanMove,\n        onPanEnd: this.onPanEnd,\n        onPanCancel: this.onPanEnd,\n        onSwipeLeft: this.doOpenRight,\n        onSwipeRight: this.doOpenLeft,\n        direction: 'horizontal'\n      }, refProps), React.createElement('div', {\n        className: prefixCls + '-content'\n      }, children))) : React.createElement('div', _extends({}, refProps, divProps), children);\n    }\n  }]);\n\n  return Swipeout;\n}(React.Component);\n\nexport default Swipeout;\nSwipeout.defaultProps = {\n  prefixCls: 'rc-swipeout',\n  autoClose: false,\n  disabled: false,\n  left: [],\n  right: [],\n  onOpen: function onOpen() {},\n  onClose: function onClose() {}\n};","map":null,"metadata":{},"sourceType":"module"}