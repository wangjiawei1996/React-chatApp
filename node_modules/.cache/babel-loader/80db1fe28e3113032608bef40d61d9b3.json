{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _createClass from 'babel-runtime/helpers/createClass';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport classnames from 'classnames';\nimport React from 'react';\nimport TouchFeedback from 'rmc-feedback';\nimport { IS_IOS } from '../_util/exenv';\nexport var KeyboardItem = function (_React$Component) {\n  _inherits(KeyboardItem, _React$Component);\n\n  function KeyboardItem() {\n    _classCallCheck(this, KeyboardItem);\n\n    return _possibleConstructorReturn(this, (KeyboardItem.__proto__ || Object.getPrototypeOf(KeyboardItem)).apply(this, arguments));\n  }\n\n  _createClass(KeyboardItem, [{\n    key: 'render',\n    value: function render() {\n      var _a = this.props,\n          prefixCls = _a.prefixCls,\n          _onClick = _a.onClick,\n          className = _a.className,\n          disabled = _a.disabled,\n          children = _a.children,\n          tdRef = _a.tdRef,\n          label = _a.label,\n          iconOnly = _a.iconOnly,\n          restProps = __rest(_a, [\"prefixCls\", \"onClick\", \"className\", \"disabled\", \"children\", \"tdRef\", \"label\", \"iconOnly\"]);\n\n      var value = children;\n\n      if (className === 'keyboard-delete') {\n        value = 'delete';\n      } else if (className === 'keyboard-hide') {\n        value = 'hide';\n      } else if (className === 'keyboard-confirm') {\n        value = 'confirm';\n      }\n\n      var wrapCls = classnames(prefixCls + '-item', className);\n      return React.createElement(TouchFeedback, {\n        activeClassName: prefixCls + '-item-active'\n      }, React.createElement('td', _extends({\n        ref: tdRef // tslint:disable-next-line:jsx-no-multiline-js\n        ,\n        onClick: function onClick(e) {\n          _onClick(e, value);\n        },\n        className: wrapCls\n      }, restProps), children, iconOnly && React.createElement('i', {\n        className: 'sr-only'\n      }, label)));\n    }\n  }]);\n\n  return KeyboardItem;\n}(React.Component);\nKeyboardItem.defaultProps = {\n  prefixCls: 'am-number-keyboard',\n  onClick: function onClick() {},\n  disabled: false\n};\n\nvar CustomKeyboard = function (_React$Component2) {\n  _inherits(CustomKeyboard, _React$Component2);\n\n  function CustomKeyboard() {\n    _classCallCheck(this, CustomKeyboard);\n\n    var _this2 = _possibleConstructorReturn(this, (CustomKeyboard.__proto__ || Object.getPrototypeOf(CustomKeyboard)).apply(this, arguments));\n\n    _this2.onKeyboardClick = function (e) {\n      var value = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n      e.nativeEvent.stopImmediatePropagation();\n\n      if (value === 'confirm' && _this2.confirmDisabled) {\n        return null;\n      } else {\n        if (_this2.linkedInput) {\n          _this2.linkedInput.onKeyboardClick(value);\n        }\n      }\n    };\n\n    _this2.renderKeyboardItem = function (item, index) {\n      return React.createElement(KeyboardItem, {\n        onClick: _this2.onKeyboardClick,\n        key: 'item-' + item + '-' + index\n      }, item);\n    };\n\n    return _this2;\n  }\n\n  _createClass(CustomKeyboard, [{\n    key: 'render',\n    value: function render() {\n      var _this3 = this;\n\n      var _props = this.props,\n          prefixCls = _props.prefixCls,\n          confirmLabel = _props.confirmLabel,\n          backspaceLabel = _props.backspaceLabel,\n          cancelKeyboardLabel = _props.cancelKeyboardLabel,\n          wrapProps = _props.wrapProps,\n          header = _props.header;\n      var wrapperCls = classnames(prefixCls + '-wrapper', prefixCls + '-wrapper-hide');\n      return React.createElement('div', _extends({\n        className: wrapperCls,\n        ref: function ref(el) {\n          return _this3.antmKeyboard = el;\n        }\n      }, wrapProps), header && React.cloneElement(header, {\n        onClick: this.onKeyboardClick\n      }), React.createElement('table', null, React.createElement('tbody', null, React.createElement('tr', null, ['1', '2', '3'].map(function (item, index) {\n        return (// tslint:disable-next-line:jsx-no-multiline-js\n          _this3.renderKeyboardItem(item, index)\n        );\n      }), React.createElement(KeyboardItem, _extends({\n        className: 'keyboard-delete',\n        rowSpan: 2,\n        onClick: this.onKeyboardClick\n      }, this.getAriaAttr(backspaceLabel)))), React.createElement('tr', null, ['4', '5', '6'].map(function (item, index) {\n        return (// tslint:disable-next-line:jsx-no-multiline-js\n          _this3.renderKeyboardItem(item, index)\n        );\n      })), React.createElement('tr', null, ['7', '8', '9'].map(function (item, index) {\n        return (// tslint:disable-next-line:jsx-no-multiline-js\n          _this3.renderKeyboardItem(item, index)\n        );\n      }), React.createElement(KeyboardItem, {\n        className: 'keyboard-confirm',\n        rowSpan: 2,\n        onClick: this.onKeyboardClick,\n        tdRef: function tdRef(el) {\n          return _this3.confirmKeyboardItem = el;\n        }\n      }, confirmLabel)), React.createElement('tr', null, ['.', '0'].map(function (item, index) {\n        return (// tslint:disable-next-line:jsx-no-multiline-js\n          _this3.renderKeyboardItem(item, index)\n        );\n      }), React.createElement(KeyboardItem, _extends({\n        className: 'keyboard-hide',\n        onClick: this.onKeyboardClick\n      }, this.getAriaAttr(cancelKeyboardLabel)))))));\n    }\n  }, {\n    key: 'getAriaAttr',\n    value: function getAriaAttr(label) {\n      if (IS_IOS) {\n        return {\n          label: label,\n          iconOnly: true\n        };\n      } else {\n        return {\n          role: 'button',\n          'aria-label': label\n        };\n      }\n    }\n  }]);\n\n  return CustomKeyboard;\n}(React.Component);\n\nCustomKeyboard.defaultProps = {\n  prefixCls: 'am-number-keyboard'\n};\nexport default CustomKeyboard;","map":null,"metadata":{},"sourceType":"module"}