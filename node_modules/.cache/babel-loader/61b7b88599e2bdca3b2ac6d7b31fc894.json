{"ast":null,"code":"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport closest from '../_util/closest';\nimport Modal from './Modal';\nexport default function prompt(title, message, callbackOrActions) {\n  var type = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'default';\n  var defaultValue = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : '';\n  var placeholders = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : ['', ''];\n  var platform = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 'ios';\n  var closed = false;\n  defaultValue = typeof defaultValue === 'string' ? defaultValue : typeof defaultValue === 'number' ? '' + defaultValue : '';\n\n  if (!callbackOrActions) {\n    // console.log('Must specify callbackOrActions');\n    return {\n      close: function close() {}\n    };\n  }\n\n  var prefixCls = 'am-modal';\n  var data = {\n    text: defaultValue\n  };\n\n  function onChange(e) {\n    var target = e.target;\n    var inputType = target.getAttribute('type');\n\n    if (inputType !== null) {\n      data[inputType] = target.value;\n    }\n  } // hotfix issue: https://github.com/ant-design/ant-design-mobile/issues/2177\n\n\n  function onClick(e) {\n    var target = e.currentTarget || e.target;\n\n    if (target) {\n      target.focus();\n    }\n  }\n\n  var inputDom = void 0;\n\n  var focusFn = function focusFn(input) {\n    setTimeout(function () {\n      if (input) {\n        input.focus();\n      }\n    }, 500);\n  };\n\n  switch (type) {\n    case 'login-password':\n      inputDom = React.createElement('div', {\n        className: prefixCls + '-input-container'\n      }, React.createElement('div', {\n        className: prefixCls + '-input'\n      }, React.createElement('label', null, React.createElement('input', {\n        type: 'text',\n        defaultValue: data.text,\n        ref: function ref(input) {\n          return focusFn(input);\n        },\n        onClick: onClick,\n        onChange: onChange,\n        placeholder: placeholders[0]\n      }))), React.createElement('div', {\n        className: prefixCls + '-input'\n      }, React.createElement('label', null, React.createElement('input', {\n        type: 'password',\n        defaultValue: data.password,\n        onClick: onClick,\n        onChange: onChange,\n        placeholder: placeholders[1]\n      }))));\n      break;\n\n    case 'secure-text':\n      inputDom = React.createElement('div', {\n        className: prefixCls + '-input-container'\n      }, React.createElement('div', {\n        className: prefixCls + '-input'\n      }, React.createElement('label', null, React.createElement('input', {\n        type: 'password',\n        defaultValue: data.password,\n        ref: function ref(input) {\n          return focusFn(input);\n        },\n        onClick: onClick,\n        onChange: onChange,\n        placeholder: placeholders[0]\n      }))));\n      break;\n\n    case 'default':\n    default:\n      inputDom = React.createElement('div', {\n        className: prefixCls + '-input-container'\n      }, React.createElement('div', {\n        className: prefixCls + '-input'\n      }, React.createElement('label', null, React.createElement('input', {\n        type: 'text',\n        defaultValue: data.text,\n        ref: function ref(input) {\n          return focusFn(input);\n        },\n        onClick: onClick,\n        onChange: onChange,\n        placeholder: placeholders[0]\n      }))));\n  }\n\n  var content = React.createElement('div', null, message, inputDom);\n  var div = document.createElement('div');\n  document.body.appendChild(div);\n\n  function close() {\n    ReactDOM.unmountComponentAtNode(div);\n\n    if (div && div.parentNode) {\n      div.parentNode.removeChild(div);\n    }\n  }\n\n  function handleConfirm(callback) {\n    if (typeof callback !== 'function') {\n      return;\n    }\n\n    var _data$text = data.text,\n        text = _data$text === undefined ? '' : _data$text,\n        _data$password = data.password,\n        password = _data$password === undefined ? '' : _data$password;\n    var callbackArgs = type === 'login-password' ? [text, password] : type === 'secure-text' ? [password] : [text];\n    return callback.apply(undefined, callbackArgs);\n  }\n\n  var actions = void 0;\n\n  if (typeof callbackOrActions === 'function') {\n    actions = [{\n      text: '取消',\n      onPress: function onPress() {}\n    }, {\n      text: '确定',\n      onPress: function onPress() {\n        handleConfirm(callbackOrActions);\n      }\n    }];\n  } else {\n    actions = callbackOrActions.map(function (item) {\n      return {\n        text: item.text,\n        onPress: function onPress() {\n          return handleConfirm(item.onPress);\n        }\n      };\n    });\n  }\n\n  var footer = actions.map(function (button) {\n    // tslint:disable-next-line:only-arrow-functions\n    var orginPress = button.onPress || function () {};\n\n    button.onPress = function () {\n      if (closed) {\n        return;\n      }\n\n      var res = orginPress();\n\n      if (res && res.then) {\n        res.then(function () {\n          closed = true;\n          close();\n        })['catch'](function () {});\n      } else {\n        closed = true;\n        close();\n      }\n    };\n\n    return button;\n  });\n\n  function onWrapTouchStart(e) {\n    // exclude input element for focus\n    if (!/iPhone|iPod|iPad/i.test(navigator.userAgent)) {\n      return;\n    }\n\n    var pNode = closest(e.target, '.' + prefixCls + '-content');\n\n    if (!pNode) {\n      e.preventDefault();\n    }\n  }\n\n  ReactDOM.render(React.createElement(Modal, {\n    visible: true,\n    transparent: true,\n    prefixCls: prefixCls,\n    title: title,\n    closable: false,\n    maskClosable: false,\n    transitionName: 'am-zoom',\n    footer: footer,\n    maskTransitionName: 'am-fade',\n    platform: platform,\n    wrapProps: {\n      onTouchStart: onWrapTouchStart\n    }\n  }, React.createElement('div', {\n    className: prefixCls + '-propmt-content'\n  }, content)), div);\n  return {\n    close: close\n  };\n}","map":null,"metadata":{},"sourceType":"module"}