{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _createClass from 'babel-runtime/helpers/createClass';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport React, { Component } from 'react';\nimport Trigger from 'rmc-trigger';\nimport { placements } from './placements';\n\nvar Tooltip = function (_Component) {\n  _inherits(Tooltip, _Component);\n\n  function Tooltip() {\n    _classCallCheck(this, Tooltip);\n\n    var _this = _possibleConstructorReturn(this, (Tooltip.__proto__ || Object.getPrototypeOf(Tooltip)).apply(this, arguments));\n\n    _this.getPopupElement = function () {\n      var _this$props = _this.props,\n          arrowContent = _this$props.arrowContent,\n          overlay = _this$props.overlay,\n          prefixCls = _this$props.prefixCls;\n      return [React.createElement('div', {\n        className: prefixCls + '-arrow',\n        key: 'arrow'\n      }, arrowContent), React.createElement('div', {\n        className: prefixCls + '-inner',\n        key: 'content'\n      }, typeof overlay === 'function' ? overlay() : overlay)];\n    };\n\n    _this.saveTrigger = function (node) {\n      _this.trigger = node;\n    };\n\n    return _this;\n  }\n\n  _createClass(Tooltip, [{\n    key: 'getPopupDomNode',\n    value: function getPopupDomNode() {\n      return this.trigger.triggerRef.getPopupDomNode();\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _a = this.props,\n          overlayClassName = _a.overlayClassName,\n          overlayStyle = _a.overlayStyle,\n          prefixCls = _a.prefixCls,\n          children = _a.children,\n          onVisibleChange = _a.onVisibleChange,\n          afterVisibleChange = _a.afterVisibleChange,\n          transitionName = _a.transitionName,\n          animation = _a.animation,\n          placement = _a.placement,\n          align = _a.align,\n          destroyTooltipOnHide = _a.destroyTooltipOnHide,\n          defaultVisible = _a.defaultVisible,\n          getTooltipContainer = _a.getTooltipContainer,\n          restProps = __rest(_a, [\"overlayClassName\", \"overlayStyle\", \"prefixCls\", \"children\", \"onVisibleChange\", \"afterVisibleChange\", \"transitionName\", \"animation\", \"placement\", \"align\", \"destroyTooltipOnHide\", \"defaultVisible\", \"getTooltipContainer\"]);\n\n      var extraProps = _extends({}, restProps);\n\n      if ('visible' in this.props) {\n        extraProps.popupVisible = this.props.visible;\n      }\n\n      return React.createElement(Trigger, _extends({\n        popupClassName: overlayClassName,\n        ref: this.saveTrigger,\n        prefixCls: prefixCls,\n        popup: this.getPopupElement,\n        builtinPlacements: placements,\n        popupPlacement: placement,\n        popupAlign: align,\n        getPopupContainer: getTooltipContainer,\n        onPopupVisibleChange: onVisibleChange,\n        afterPopupVisibleChange: afterVisibleChange,\n        popupTransitionName: transitionName,\n        popupAnimation: animation,\n        defaultPopupVisible: defaultVisible,\n        destroyPopupOnHide: destroyTooltipOnHide,\n        popupStyle: overlayStyle\n      }, extraProps), children);\n    }\n  }]);\n\n  return Tooltip;\n}(Component);\n\nTooltip.defaultProps = {\n  prefixCls: 'rmc-tooltip',\n  destroyTooltipOnHide: false,\n  align: {},\n  placement: 'right',\n  arrowContent: null\n};\nexport default Tooltip;","map":null,"metadata":{},"sourceType":"module"}