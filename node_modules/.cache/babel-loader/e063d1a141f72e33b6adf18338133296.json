{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _createClass from 'babel-runtime/helpers/createClass';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport React from 'react';\nimport classNames from 'classnames';\n\nvar StaticRenderer = function (_React$Component) {\n  _inherits(StaticRenderer, _React$Component);\n\n  function StaticRenderer() {\n    _classCallCheck(this, StaticRenderer);\n\n    return _possibleConstructorReturn(this, (StaticRenderer.__proto__ || Object.getPrototypeOf(StaticRenderer)).apply(this, arguments));\n  }\n\n  _createClass(StaticRenderer, [{\n    key: 'shouldComponentUpdate',\n    value: function shouldComponentUpdate(nextProps) {\n      return nextProps.shouldUpdate;\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      return React.createElement('div', null, this.props.render());\n    }\n  }]);\n\n  return StaticRenderer;\n}(React.Component);\n\nfunction setTransform(nodeStyle, value) {\n  nodeStyle.transform = value;\n  nodeStyle.webkitTransform = value;\n  nodeStyle.MozTransform = value;\n}\n\nvar isWebView = typeof navigator !== 'undefined' && /(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/i.test(navigator.userAgent);\nvar DOWN = 'down';\nvar UP = 'up';\nvar INDICATOR = {\n  activate: 'release',\n  deactivate: 'pull',\n  release: 'loading',\n  finish: 'finish'\n};\nvar supportsPassive = false;\n\ntry {\n  var opts = Object.defineProperty({}, 'passive', {\n    get: function get() {\n      supportsPassive = true;\n    }\n  });\n  window.addEventListener('test', null, opts);\n} catch (e) {// empty\n}\n\nvar willPreventDefault = supportsPassive ? {\n  passive: false\n} : false; // const willNotPreventDefault = supportsPassive ? { passive: true } : false;\n\nvar PullToRefresh = function (_React$Component2) {\n  _inherits(PullToRefresh, _React$Component2);\n\n  function PullToRefresh() {\n    _classCallCheck(this, PullToRefresh); // https://github.com/yiminghe/zscroller/blob/2d97973287135745818a0537712235a39a6a62a1/src/Scroller.js#L355\n    // currSt: `activate` / `deactivate` / `release` / `finish`\n\n\n    var _this2 = _possibleConstructorReturn(this, (PullToRefresh.__proto__ || Object.getPrototypeOf(PullToRefresh)).apply(this, arguments));\n\n    _this2.state = {\n      currSt: 'deactivate',\n      dragOnEdge: false\n    };\n    _this2._isMounted = false;\n    _this2.shouldUpdateChildren = false;\n\n    _this2.triggerPullToRefresh = function () {\n      // 在初始化时、用代码 自动 触发 pullToRefresh\n      // 注意：当 direction 为 up 时，当 visible length < content length 时、则看不到效果\n      // 添加this._isMounted的判断，否则组建一实例化，currSt就会是finish\n      if (!_this2.state.dragOnEdge && _this2._isMounted) {\n        if (_this2.props.refreshing) {\n          if (_this2.props.direction === UP) {\n            _this2._lastScreenY = -_this2.props.distanceToRefresh - 1;\n          }\n\n          if (_this2.props.direction === DOWN) {\n            _this2._lastScreenY = _this2.props.distanceToRefresh + 1;\n          } // change dom need after setState\n\n\n          _this2.setState({\n            currSt: 'release'\n          }, function () {\n            return _this2.setContentStyle(_this2._lastScreenY);\n          });\n        } else {\n          _this2.setState({\n            currSt: 'finish'\n          }, function () {\n            return _this2.reset();\n          });\n        }\n      }\n    };\n\n    _this2.init = function (ele) {\n      if (!ele) {\n        // like return in destroy fn ???!!\n        return;\n      }\n\n      _this2._to = {\n        touchstart: _this2.onTouchStart.bind(_this2, ele),\n        touchmove: _this2.onTouchMove.bind(_this2, ele),\n        touchend: _this2.onTouchEnd.bind(_this2, ele),\n        touchcancel: _this2.onTouchEnd.bind(_this2, ele)\n      };\n      Object.keys(_this2._to).forEach(function (key) {\n        ele.addEventListener(key, _this2._to[key], willPreventDefault);\n      });\n    };\n\n    _this2.destroy = function (ele) {\n      if (!_this2._to || !ele) {\n        // componentWillUnmount fire before componentDidMount, like forceUpdate ???!!\n        return;\n      }\n\n      Object.keys(_this2._to).forEach(function (key) {\n        ele.removeEventListener(key, _this2._to[key]);\n      });\n    };\n\n    _this2.onTouchStart = function (_ele, e) {\n      _this2._ScreenY = _this2._startScreenY = e.touches[0].screenY; // 一开始 refreshing 为 true 时 this._lastScreenY 有值\n\n      _this2._lastScreenY = _this2._lastScreenY || 0;\n    };\n\n    _this2.isEdge = function (ele, direction) {\n      var container = _this2.props.getScrollContainer();\n\n      if (container && container === document.body) {\n        // In chrome61 `document.body.scrollTop` is invalid\n        var scrollNode = document.scrollingElement ? document.scrollingElement : document.body;\n\n        if (direction === UP) {\n          return scrollNode.scrollHeight - scrollNode.scrollTop <= window.innerHeight;\n        }\n\n        if (direction === DOWN) {\n          return scrollNode.scrollTop <= 0;\n        }\n      }\n\n      if (direction === UP) {\n        return ele.scrollHeight - ele.scrollTop === ele.clientHeight;\n      }\n\n      if (direction === DOWN) {\n        return ele.scrollTop <= 0;\n      }\n    };\n\n    _this2.damping = function (dy) {\n      if (Math.abs(_this2._lastScreenY) > _this2.props.damping) {\n        return 0;\n      }\n\n      var ratio = Math.abs(_this2._ScreenY - _this2._startScreenY) / window.screen.height;\n      dy *= (1 - ratio) * 0.6;\n      return dy;\n    };\n\n    _this2.onTouchMove = function (ele, e) {\n      // 使用 pageY 对比有问题\n      var _screenY = e.touches[0].screenY;\n      var direction = _this2.props.direction; // 拖动方向不符合的不处理\n\n      if (direction === UP && _this2._startScreenY < _screenY || direction === DOWN && _this2._startScreenY > _screenY) {\n        return;\n      }\n\n      if (_this2.isEdge(ele, direction)) {\n        if (!_this2.state.dragOnEdge) {\n          // 当用户开始往上滑的时候isEdge还是false的话，会导致this._ScreenY不是想要的，只有当isEdge为true时，再上滑，才有意义\n          // 下面这行代码解决了上面这个问题\n          _this2._ScreenY = _this2._startScreenY = e.touches[0].screenY;\n\n          _this2.setState({\n            dragOnEdge: true\n          });\n        }\n\n        e.preventDefault(); // add stopPropagation with fastclick will trigger content onClick event. why?\n        // ref https://github.com/ant-design/ant-design-mobile/issues/2141\n        // e.stopPropagation();\n\n        var _diff = Math.round(_screenY - _this2._ScreenY);\n\n        _this2._ScreenY = _screenY;\n        _this2._lastScreenY += _this2.damping(_diff);\n\n        _this2.setContentStyle(_this2._lastScreenY);\n\n        if (Math.abs(_this2._lastScreenY) < _this2.props.distanceToRefresh) {\n          if (_this2.state.currSt !== 'deactivate') {\n            // console.log('back to the distance');\n            _this2.setState({\n              currSt: 'deactivate'\n            });\n          }\n        } else {\n          if (_this2.state.currSt === 'deactivate') {\n            // console.log('reach to the distance');\n            _this2.setState({\n              currSt: 'activate'\n            });\n          }\n        } // https://github.com/ant-design/ant-design-mobile/issues/573#issuecomment-339560829\n        // iOS UIWebView issue, It seems no problem in WKWebView\n\n\n        if (isWebView && e.changedTouches[0].clientY < 0) {\n          _this2.onTouchEnd();\n        }\n      }\n    };\n\n    _this2.onTouchEnd = function () {\n      if (_this2.state.dragOnEdge) {\n        _this2.setState({\n          dragOnEdge: false\n        });\n      }\n\n      if (_this2.state.currSt === 'activate') {\n        _this2.setState({\n          currSt: 'release'\n        });\n\n        _this2._timer = setTimeout(function () {\n          if (!_this2.props.refreshing) {\n            _this2.setState({\n              currSt: 'finish'\n            }, function () {\n              return _this2.reset();\n            });\n          }\n\n          _this2._timer = undefined;\n        }, 1000);\n\n        _this2.props.onRefresh();\n      } else {\n        _this2.reset();\n      }\n    };\n\n    _this2.reset = function () {\n      _this2._lastScreenY = 0;\n\n      _this2.setContentStyle(0);\n    };\n\n    _this2.setContentStyle = function (ty) {\n      // todos: Why sometimes do not have `this.contentRef` ?\n      if (_this2.contentRef) {\n        setTransform(_this2.contentRef.style, 'translate3d(0px,' + ty + 'px,0)');\n      }\n    };\n\n    return _this2;\n  }\n\n  _createClass(PullToRefresh, [{\n    key: 'shouldComponentUpdate',\n    value: function shouldComponentUpdate(nextProps) {\n      this.shouldUpdateChildren = this.props.children !== nextProps.children;\n      return true;\n    }\n  }, {\n    key: 'componentDidUpdate',\n    value: function componentDidUpdate(prevProps) {\n      if (prevProps === this.props || prevProps.refreshing === this.props.refreshing) {\n        return;\n      } // triggerPullToRefresh 需要尽可能减少 setState 次数\n\n\n      this.triggerPullToRefresh();\n    }\n  }, {\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      var _this3 = this; // `getScrollContainer` most likely return React.Node at the next tick. Need setTimeout\n\n\n      setTimeout(function () {\n        _this3.init(_this3.props.getScrollContainer() || _this3.containerRef);\n\n        _this3.triggerPullToRefresh();\n\n        _this3._isMounted = true;\n      });\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      // Should have no setTimeout here!\n      this.destroy(this.props.getScrollContainer() || this.containerRef);\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this4 = this;\n\n      var props = _extends({}, this.props);\n\n      delete props.damping;\n\n      var className = props.className,\n          prefixCls = props.prefixCls,\n          children = props.children,\n          getScrollContainer = props.getScrollContainer,\n          direction = props.direction,\n          onRefresh = props.onRefresh,\n          refreshing = props.refreshing,\n          indicator = props.indicator,\n          distanceToRefresh = props.distanceToRefresh,\n          restProps = __rest(props, [\"className\", \"prefixCls\", \"children\", \"getScrollContainer\", \"direction\", \"onRefresh\", \"refreshing\", \"indicator\", \"distanceToRefresh\"]);\n\n      var renderChildren = React.createElement(StaticRenderer, {\n        shouldUpdate: this.shouldUpdateChildren,\n        render: function render() {\n          return children;\n        }\n      });\n\n      var renderRefresh = function renderRefresh(cls) {\n        var cla = classNames(cls, !_this4.state.dragOnEdge && prefixCls + '-transition');\n        return React.createElement('div', {\n          className: prefixCls + '-content-wrapper'\n        }, React.createElement('div', {\n          className: cla,\n          ref: function ref(el) {\n            return _this4.contentRef = el;\n          }\n        }, direction === UP ? renderChildren : null, React.createElement('div', {\n          className: prefixCls + '-indicator'\n        }, indicator[_this4.state.currSt] || INDICATOR[_this4.state.currSt]), direction === DOWN ? renderChildren : null));\n      };\n\n      if (getScrollContainer()) {\n        return renderRefresh(prefixCls + '-content ' + prefixCls + '-' + direction);\n      }\n\n      return React.createElement('div', _extends({\n        ref: function ref(el) {\n          return _this4.containerRef = el;\n        },\n        className: classNames(className, prefixCls, prefixCls + '-' + direction)\n      }, restProps), renderRefresh(prefixCls + '-content'));\n    }\n  }]);\n\n  return PullToRefresh;\n}(React.Component);\n\nexport default PullToRefresh;\nPullToRefresh.defaultProps = {\n  prefixCls: 'rmc-pull-to-refresh',\n  getScrollContainer: function getScrollContainer() {\n    return undefined;\n  },\n  direction: DOWN,\n  distanceToRefresh: 25,\n  damping: 100,\n  indicator: INDICATOR\n};","map":null,"metadata":{},"sourceType":"module"}