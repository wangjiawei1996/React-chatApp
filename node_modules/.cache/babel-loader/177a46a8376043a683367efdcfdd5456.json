{"ast":null,"code":"import _defineProperty from 'babel-runtime/helpers/defineProperty';\nimport _extends from 'babel-runtime/helpers/extends';\n/* tslint:disable:jsx-no-multiline-js */\n\nimport classnames from 'classnames';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport Dialog from 'rmc-dialog';\nimport TouchFeedback from 'rmc-feedback';\nimport getDataAttr from '../_util/getDataAttr';\nimport Badge from '../badge';\nvar NORMAL = 'NORMAL';\nvar SHARE = 'SHARE'; // tslint:disable-next-line:no-empty\n\nfunction noop() {}\n\nvar queue = [];\n\nfunction createActionSheet(flag, config, callback) {\n  var props = _extends({\n    prefixCls: 'am-action-sheet',\n    cancelButtonText: '取消'\n  }, config);\n\n  var prefixCls = props.prefixCls,\n      className = props.className,\n      transitionName = props.transitionName,\n      maskTransitionName = props.maskTransitionName,\n      _props$maskClosable = props.maskClosable,\n      maskClosable = _props$maskClosable === undefined ? true : _props$maskClosable;\n  var div = document.createElement('div');\n  document.body.appendChild(div);\n  queue.push(close);\n\n  function close() {\n    if (div) {\n      ReactDOM.unmountComponentAtNode(div);\n\n      if (div.parentNode) {\n        div.parentNode.removeChild(div);\n      }\n\n      var index = queue.indexOf(close);\n\n      if (index !== -1) {\n        queue.splice(index, 1);\n      }\n    }\n  }\n\n  function cb(index) {\n    var rowIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    var res = callback(index, rowIndex);\n\n    if (res && res.then) {\n      res.then(function () {\n        close();\n      });\n    } else {\n      close();\n    }\n  }\n\n  var title = props.title,\n      message = props.message,\n      options = props.options,\n      destructiveButtonIndex = props.destructiveButtonIndex,\n      cancelButtonIndex = props.cancelButtonIndex,\n      cancelButtonText = props.cancelButtonText,\n      _props$badges = props.badges,\n      badges = _props$badges === undefined ? [] : _props$badges;\n  var titleMsg = [title ? React.createElement('h3', {\n    key: '0',\n    className: prefixCls + '-title'\n  }, title) : null, message ? React.createElement('div', {\n    key: '1',\n    className: prefixCls + '-message'\n  }, message) : null];\n  var children = null;\n  var mode = 'normal';\n\n  switch (flag) {\n    case NORMAL:\n      mode = 'normal';\n      var normalOptions = options;\n      var badgesMap = {};\n\n      if (badges && badges.length > 0) {\n        badges.forEach(function (element) {\n          if (element.index >= 0) {\n            badgesMap[element.index] = React.createElement(Badge, element);\n          }\n        });\n      }\n\n      children = React.createElement('div', getDataAttr(props), titleMsg, React.createElement('div', {\n        className: prefixCls + '-button-list',\n        role: 'group'\n      }, normalOptions.map(function (item, index) {\n        var _classnames;\n\n        var itemProps = {\n          className: classnames(prefixCls + '-button-list-item', (_classnames = {}, _defineProperty(_classnames, prefixCls + '-destructive-button', destructiveButtonIndex === index), _defineProperty(_classnames, prefixCls + '-cancel-button', cancelButtonIndex === index), _classnames)),\n          onClick: function onClick() {\n            return cb(index);\n          },\n          role: 'button'\n        };\n        var bContent = React.createElement('div', itemProps, item); // 仅在设置徽标的情况下修改dom结构\n\n        if (badgesMap[index]) {\n          bContent = React.createElement('div', _extends({}, itemProps, {\n            className: itemProps.className + ' ' + prefixCls + '-button-list-badge'\n          }), React.createElement('span', {\n            className: prefixCls + '-button-list-item-content'\n          }, item), badgesMap[index]);\n        }\n\n        var bItem = React.createElement(TouchFeedback, {\n          key: index,\n          activeClassName: prefixCls + '-button-list-item-active'\n        }, bContent);\n\n        if (cancelButtonIndex === index || destructiveButtonIndex === index) {\n          bItem = React.createElement(TouchFeedback, {\n            key: index,\n            activeClassName: prefixCls + '-button-list-item-active'\n          }, React.createElement('div', itemProps, item, cancelButtonIndex === index ? React.createElement('span', {\n            className: prefixCls + '-cancel-button-mask'\n          }) : null));\n        }\n\n        return bItem;\n      })));\n      break;\n\n    case SHARE:\n      mode = 'share';\n      var multipleLine = options.length && Array.isArray(options[0]) || false;\n\n      var createList = function createList(item, index) {\n        var rowIndex = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n        return React.createElement('div', {\n          className: prefixCls + '-share-list-item',\n          role: 'button',\n          key: index,\n          onClick: function onClick() {\n            return cb(index, rowIndex);\n          }\n        }, React.createElement('div', {\n          className: prefixCls + '-share-list-item-icon'\n        }, item.icon), React.createElement('div', {\n          className: prefixCls + '-share-list-item-title'\n        }, item.title));\n      };\n\n      children = React.createElement('div', getDataAttr(props), titleMsg, React.createElement('div', {\n        className: prefixCls + '-share'\n      }, multipleLine ? options.map(function (item, index) {\n        return React.createElement('div', {\n          key: index,\n          className: prefixCls + '-share-list'\n        }, item.map(function (ii, ind) {\n          return createList(ii, ind, index);\n        }));\n      }) : React.createElement('div', {\n        className: prefixCls + '-share-list'\n      }, options.map(function (item, index) {\n        return createList(item, index);\n      })), React.createElement(TouchFeedback, {\n        activeClassName: prefixCls + '-share-cancel-button-active'\n      }, React.createElement('div', {\n        className: prefixCls + '-share-cancel-button',\n        role: 'button',\n        onClick: function onClick() {\n          return cb(-1);\n        }\n      }, cancelButtonText))));\n      break;\n\n    default:\n      break;\n  }\n\n  var rootCls = classnames(prefixCls + '-' + mode, className);\n  ReactDOM.render(React.createElement(Dialog, {\n    visible: true,\n    title: '',\n    footer: '',\n    prefixCls: prefixCls,\n    className: rootCls,\n    transitionName: transitionName || 'am-slide-up',\n    maskTransitionName: maskTransitionName || 'am-fade',\n    onClose: function onClose() {\n      return cb(cancelButtonIndex || -1);\n    },\n    maskClosable: maskClosable,\n    wrapProps: props.wrapProps || {}\n  }, children), div);\n  return {\n    close: close\n  };\n}\n\nexport default {\n  showActionSheetWithOptions: function showActionSheetWithOptions(config) {\n    var callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : noop;\n    createActionSheet(NORMAL, config, callback);\n  },\n  showShareActionSheetWithOptions: function showShareActionSheetWithOptions(config) {\n    var callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : noop;\n    createActionSheet(SHARE, config, callback);\n  },\n  close: function close() {\n    queue.forEach(function (q) {\n      return q();\n    });\n  }\n};","map":null,"metadata":{},"sourceType":"module"}