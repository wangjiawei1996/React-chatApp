{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport _defineProperty from 'babel-runtime/helpers/defineProperty';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _createClass from 'babel-runtime/helpers/createClass';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport classnames from 'classnames';\nimport React from 'react';\nimport TouchFeedback from 'rmc-feedback';\nimport getDataAttr from '../_util/getDataAttr';\nimport Icon from '../icon';\n\nvar Tag = function (_React$Component) {\n  _inherits(Tag, _React$Component);\n\n  function Tag(props) {\n    _classCallCheck(this, Tag);\n\n    var _this = _possibleConstructorReturn(this, (Tag.__proto__ || Object.getPrototypeOf(Tag)).call(this, props));\n\n    _this.onClick = function () {\n      var _this$props = _this.props,\n          disabled = _this$props.disabled,\n          onChange = _this$props.onChange;\n\n      if (disabled) {\n        return;\n      }\n\n      var isSelect = _this.state.selected;\n\n      _this.setState({\n        selected: !isSelect\n      }, function () {\n        if (onChange) {\n          onChange(!isSelect);\n        }\n      });\n    };\n\n    _this.onTagClose = function () {\n      if (_this.props.onClose) {\n        _this.props.onClose();\n      }\n\n      _this.setState({\n        closed: true\n      }, _this.props.afterClose);\n    };\n\n    _this.state = {\n      selected: props.selected,\n      closed: false\n    };\n    return _this;\n  }\n\n  _createClass(Tag, [{\n    key: 'componentWillReceiveProps',\n    value: function componentWillReceiveProps(nextProps) {\n      if (this.props.selected !== nextProps.selected) {\n        this.setState({\n          selected: nextProps.selected\n        });\n      }\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _classnames;\n\n      var _props = this.props,\n          children = _props.children,\n          className = _props.className,\n          prefixCls = _props.prefixCls,\n          disabled = _props.disabled,\n          closable = _props.closable,\n          small = _props.small,\n          style = _props.style;\n      var wrapCls = classnames(className, prefixCls, (_classnames = {}, _defineProperty(_classnames, prefixCls + '-normal', !disabled && (!this.state.selected || small || closable)), _defineProperty(_classnames, prefixCls + '-small', small), _defineProperty(_classnames, prefixCls + '-active', this.state.selected && !disabled && !small && !closable), _defineProperty(_classnames, prefixCls + '-disabled', disabled), _defineProperty(_classnames, prefixCls + '-closable', closable), _classnames));\n      var closableDom = closable && !disabled && !small ? React.createElement(TouchFeedback, {\n        activeClassName: prefixCls + '-close-active'\n      }, React.createElement('div', {\n        className: prefixCls + '-close',\n        role: 'button',\n        onClick: this.onTagClose,\n        'aria-label': 'remove tag'\n      }, React.createElement(Icon, {\n        type: 'cross-circle',\n        size: 'xs',\n        'aria-hidden': 'true'\n      }))) : null;\n      return !this.state.closed ? React.createElement('div', _extends({}, getDataAttr(this.props), {\n        className: wrapCls,\n        onClick: this.onClick,\n        style: style\n      }), React.createElement('div', {\n        className: prefixCls + '-text'\n      }, children), closableDom) : null;\n    }\n  }]);\n\n  return Tag;\n}(React.Component);\n\nexport default Tag;\nTag.defaultProps = {\n  prefixCls: 'am-tag',\n  disabled: false,\n  selected: false,\n  closable: false,\n  small: false,\n  onChange: function onChange() {},\n  onClose: function onClose() {},\n  afterClose: function afterClose() {}\n};","map":null,"metadata":{},"sourceType":"module"}