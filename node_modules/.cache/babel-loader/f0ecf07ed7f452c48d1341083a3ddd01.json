{"ast":null,"code":"import _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport * as React from 'react';\nimport { Models } from './date/DataTypes';\nimport { formatDate, shallowEqual } from './util';\nimport defaultLocale from './locale/zh_CN';\n\nvar DatePicker = function (_React$Component) {\n  _inherits(DatePicker, _React$Component);\n\n  function DatePicker(props) {\n    _classCallCheck(this, DatePicker);\n\n    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));\n\n    _this.visibleMonth = [];\n\n    _this.getDateWithoutTime = function (date) {\n      if (!date) return 0;\n      return +new Date(date.getFullYear(), date.getMonth(), date.getDate());\n    };\n\n    _this.genWeekData = function (firstDate) {\n      var minDateTime = _this.getDateWithoutTime(_this.props.minDate);\n\n      var maxDateTime = _this.getDateWithoutTime(_this.props.maxDate) || Number.POSITIVE_INFINITY;\n      var weeks = [];\n\n      var nextMonth = _this.getMonthDate(firstDate, 1).firstDate;\n\n      var currentDay = firstDate;\n      var currentWeek = [];\n      weeks.push(currentWeek);\n      var startWeekday = currentDay.getDay();\n\n      if (startWeekday > 0) {\n        for (var i = 0; i < startWeekday; i++) {\n          currentWeek.push({});\n        }\n      }\n\n      while (currentDay < nextMonth) {\n        if (currentWeek.length === 7) {\n          currentWeek = [];\n          weeks.push(currentWeek);\n        }\n\n        var dayOfMonth = currentDay.getDate();\n        var tick = +currentDay;\n        currentWeek.push({\n          tick: tick,\n          dayOfMonth: dayOfMonth,\n          selected: Models.SelectType.None,\n          isFirstOfMonth: dayOfMonth === 1,\n          isLastOfMonth: false,\n          outOfDate: tick < minDateTime || tick > maxDateTime\n        });\n        currentDay = new Date(currentDay.getTime() + 3600 * 24 * 1000);\n      }\n\n      currentWeek[currentWeek.length - 1].isLastOfMonth = true;\n      return weeks;\n    };\n\n    _this.selectDateRange = function (startDate, endDate) {\n      var clear = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      var _this$props = _this.props,\n          getDateExtra = _this$props.getDateExtra,\n          type = _this$props.type,\n          onSelectHasDisableDate = _this$props.onSelectHasDisableDate;\n\n      if (type === 'one') {\n        endDate = undefined;\n      }\n\n      var time1 = _this.getDateWithoutTime(startDate),\n          time2 = _this.getDateWithoutTime(endDate);\n\n      var startDateTick = !time2 || time1 < time2 ? time1 : time2;\n      var endDateTick = time2 && time1 > time2 ? time1 : time2;\n\n      var startMonthDate = _this.getMonthDate(new Date(startDateTick)).firstDate;\n\n      var endMonthDate = endDateTick ? new Date(endDateTick) : _this.getMonthDate(new Date(startDateTick)).lastDate;\n      var unuseable = [],\n          needUpdate = false;\n\n      _this.state.months.filter(function (m) {\n        return m.firstDate >= startMonthDate && m.firstDate <= endMonthDate;\n      }).forEach(function (m) {\n        m.weeks.forEach(function (w) {\n          return w.filter(function (d) {\n            if (!endDateTick) {\n              return d.tick && _this.inDate(startDateTick, d.tick);\n            } else {\n              return d.tick && d.tick >= startDateTick && d.tick <= endDateTick;\n            }\n          }).forEach(function (d) {\n            var oldValue = d.selected;\n\n            if (clear) {\n              d.selected = Models.SelectType.None;\n            } else {\n              var info = getDateExtra && getDateExtra(new Date(d.tick)) || {};\n\n              if (d.outOfDate || info.disable) {\n                unuseable.push(d.tick);\n              }\n\n              if (_this.inDate(startDateTick, d.tick)) {\n                if (type === 'one') {\n                  d.selected = Models.SelectType.Single;\n                } else if (!endDateTick) {\n                  d.selected = Models.SelectType.Only;\n                } else if (startDateTick !== endDateTick) {\n                  d.selected = Models.SelectType.Start;\n                } else {\n                  d.selected = Models.SelectType.All;\n                }\n              } else if (_this.inDate(endDateTick, d.tick)) {\n                d.selected = Models.SelectType.End;\n              } else {\n                d.selected = Models.SelectType.Middle;\n              }\n            }\n\n            needUpdate = needUpdate || d.selected !== oldValue;\n          });\n        });\n\n        if (needUpdate && m.componentRef) {\n          m.componentRef.updateWeeks();\n          m.componentRef.forceUpdate();\n        }\n\n        ;\n      });\n\n      if (unuseable.length > 0) {\n        if (onSelectHasDisableDate) {\n          onSelectHasDisableDate(unuseable.map(function (tick) {\n            return new Date(tick);\n          }));\n        } else {\n          console.warn('Unusable date. You can handle by onSelectHasDisableDate.', unuseable);\n        }\n      }\n    };\n\n    _this.computeVisible = function (clientHeight, scrollTop) {\n      var needUpdate = false;\n      var MAX_VIEW_PORT = clientHeight * 2;\n      var MIN_VIEW_PORT = clientHeight; // 大缓冲区外过滤规则\n\n      var filterFunc = function filterFunc(vm) {\n        return vm.y && vm.height && vm.y + vm.height > scrollTop - MAX_VIEW_PORT && vm.y < scrollTop + clientHeight + MAX_VIEW_PORT;\n      };\n\n      if (_this.props.infiniteOpt && _this.visibleMonth.length > 12) {\n        _this.visibleMonth = _this.visibleMonth.filter(filterFunc).sort(function (a, b) {\n          return +a.firstDate - +b.firstDate;\n        });\n      } // 当小缓冲区不满时填充\n\n\n      if (_this.visibleMonth.length > 0) {\n        var last = _this.visibleMonth[_this.visibleMonth.length - 1];\n\n        if (last.y !== undefined && last.height && last.y + last.height < scrollTop + clientHeight + MIN_VIEW_PORT) {\n          var lastIndex = _this.state.months.indexOf(last);\n\n          for (var i = 1; i <= 2; i++) {\n            var index = lastIndex + i;\n\n            if (index < _this.state.months.length && _this.visibleMonth.indexOf(_this.state.months[index]) < 0) {\n              _this.visibleMonth.push(_this.state.months[index]);\n            } else {\n              _this.canLoadNext() && _this.genMonthData(undefined, 1);\n            }\n          }\n\n          needUpdate = true;\n        }\n\n        var first = _this.visibleMonth[0];\n\n        if (first.y !== undefined && first.height && first.y > scrollTop - MIN_VIEW_PORT) {\n          var firstIndex = _this.state.months.indexOf(first);\n\n          for (var _i = 1; _i <= 2; _i++) {\n            var _index = firstIndex - _i;\n\n            if (_index >= 0 && _this.visibleMonth.indexOf(_this.state.months[_index]) < 0) {\n              _this.visibleMonth.unshift(_this.state.months[_index]);\n\n              needUpdate = true;\n            }\n          }\n        }\n      } else if (_this.state.months.length > 0) {\n        _this.visibleMonth = _this.state.months.filter(filterFunc);\n        needUpdate = true;\n      }\n\n      return needUpdate;\n    };\n\n    _this.createOnScroll = function () {\n      var timer = void 0;\n      var clientHeight = 0,\n          scrollTop = 0;\n      return function (data) {\n        var client = data.client,\n            top = data.top;\n        clientHeight = client;\n        scrollTop = top;\n\n        if (timer) {\n          return;\n        }\n\n        timer = setTimeout(function () {\n          timer = undefined;\n\n          if (_this.computeVisible(clientHeight, scrollTop)) {\n            _this.forceUpdate();\n          }\n        }, 64);\n      };\n    };\n\n    _this.onCellClick = function (day) {\n      if (!day.tick) return;\n      _this.props.onCellClick && _this.props.onCellClick(new Date(day.tick));\n    };\n\n    _this.state = {\n      months: []\n    };\n    return _this;\n  }\n\n  DatePicker.prototype.shouldComponentUpdate = function shouldComponentUpdate(nextProps, nextState, nextContext) {\n    return !shallowEqual(this.props, nextProps, ['startDate', 'endDate']) || !shallowEqual(this.state, nextState) || !shallowEqual(this.context, nextContext);\n  };\n\n  DatePicker.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {\n    var oldValue = this.props;\n    var newValue = nextProps;\n\n    if (oldValue.startDate !== newValue.startDate || oldValue.endDate !== newValue.endDate) {\n      if (oldValue.startDate) {\n        this.selectDateRange(oldValue.startDate, oldValue.endDate, true);\n      }\n\n      if (newValue.startDate) {\n        this.selectDateRange(newValue.startDate, newValue.endDate);\n      }\n    }\n  };\n\n  DatePicker.prototype.componentWillMount = function componentWillMount() {\n    var _props = this.props,\n        _props$initalMonths = _props.initalMonths,\n        initalMonths = _props$initalMonths === undefined ? 6 : _props$initalMonths,\n        defaultDate = _props.defaultDate;\n\n    for (var i = 0; i < initalMonths; i++) {\n      this.canLoadNext() && this.genMonthData(defaultDate, i);\n    }\n\n    this.visibleMonth = [].concat(this.state.months);\n  };\n\n  DatePicker.prototype.getMonthDate = function getMonthDate() {\n    var date = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Date();\n    var addMonth = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    var y = date.getFullYear(),\n        m = date.getMonth();\n    return {\n      firstDate: new Date(y, m + addMonth, 1),\n      lastDate: new Date(y, m + 1 + addMonth, 0)\n    };\n  };\n\n  DatePicker.prototype.canLoadPrev = function canLoadPrev() {\n    var minDate = this.props.minDate;\n    return !minDate || this.state.months.length <= 0 || +this.getMonthDate(minDate).firstDate < +this.state.months[0].firstDate;\n  };\n\n  DatePicker.prototype.canLoadNext = function canLoadNext() {\n    var maxDate = this.props.maxDate;\n    return !maxDate || this.state.months.length <= 0 || +this.getMonthDate(maxDate).firstDate > +this.state.months[this.state.months.length - 1].firstDate;\n  };\n\n  DatePicker.prototype.genMonthData = function genMonthData(date) {\n    var addMonth = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n    if (!date) {\n      date = addMonth >= 0 ? this.state.months[this.state.months.length - 1].firstDate : this.state.months[0].firstDate;\n    }\n\n    if (!date) {\n      date = new Date();\n    }\n\n    var locale = this.props.locale;\n\n    var _getMonthDate = this.getMonthDate(date, addMonth),\n        firstDate = _getMonthDate.firstDate,\n        lastDate = _getMonthDate.lastDate;\n\n    var weeks = this.genWeekData(firstDate);\n    var title = formatDate(firstDate, locale ? locale.monthTitle : 'yyyy/MM', this.props.locale);\n    var data = {\n      title: title,\n      firstDate: firstDate,\n      lastDate: lastDate,\n      weeks: weeks\n    };\n    data.component = this.genMonthComponent(data);\n\n    if (addMonth >= 0) {\n      this.state.months.push(data);\n    } else {\n      this.state.months.unshift(data);\n    }\n\n    var _props2 = this.props,\n        startDate = _props2.startDate,\n        endDate = _props2.endDate;\n\n    if (startDate) {\n      this.selectDateRange(startDate, endDate);\n    }\n\n    return data;\n  };\n\n  DatePicker.prototype.inDate = function inDate(date, tick) {\n    return date <= tick && tick < date + 24 * 3600000;\n  };\n\n  return DatePicker;\n}(React.Component);\n\nexport default DatePicker;\nDatePicker.defaultProps = {\n  prefixCls: 'rmc-calendar',\n  infinite: false,\n  infiniteOpt: false,\n  defaultDate: new Date(),\n  initalMonths: 6,\n  locale: defaultLocale\n};","map":null,"metadata":{},"sourceType":"module"}