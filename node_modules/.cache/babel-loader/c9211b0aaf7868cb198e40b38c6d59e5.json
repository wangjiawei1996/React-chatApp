{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport _defineProperty from 'babel-runtime/helpers/defineProperty';\nimport _toConsumableArray from 'babel-runtime/helpers/toConsumableArray';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _createClass from 'babel-runtime/helpers/createClass';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\n/* tslint:disable:jsx-no-multiline-js */\n\nimport classnames from 'classnames';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Button from '../button';\nimport Flex from '../flex';\nimport List from '../list';\nimport { getComponentLocale } from '../_util/getLocale';\nimport SubMenu from './SubMenu';\n\nvar Menu = function (_React$Component) {\n  _inherits(Menu, _React$Component);\n\n  function Menu(props) {\n    _classCallCheck(this, Menu);\n\n    var _this = _possibleConstructorReturn(this, (Menu.__proto__ || Object.getPrototypeOf(Menu)).call(this, props));\n\n    _this.onMenuOk = function () {\n      var onOk = _this.props.onOk;\n\n      if (onOk) {\n        onOk(_this.state.value);\n      }\n    };\n\n    _this.onMenuCancel = function () {\n      var onCancel = _this.props.onCancel;\n\n      if (onCancel) {\n        onCancel();\n      }\n    };\n\n    _this.onClickFirstLevelItem = function (dataItem) {\n      var onChange = _this.props.onChange;\n\n      _this.setState({\n        firstLevelSelectValue: dataItem.value\n      });\n\n      if (dataItem.isLeaf && onChange) {\n        onChange([dataItem.value]);\n      }\n    };\n\n    _this.getSelectValue = function (dataItem) {\n      var _this$props = _this.props,\n          level = _this$props.level,\n          multiSelect = _this$props.multiSelect;\n\n      if (multiSelect) {\n        var _this$state = _this.state,\n            value = _this$state.value,\n            firstLevelSelectValue = _this$state.firstLevelSelectValue;\n\n        if (value && value.length > 0) {\n          if (level === 2 && value[0] !== firstLevelSelectValue) {\n            /* if level is 2, when first level is reselect, reset submenu array */\n            return [firstLevelSelectValue, [dataItem.value]];\n          } else {\n            /* if level is 1, or first level isn't changed when level is 2, just do add or delete for submenu array  */\n            var chosenValues = level === 2 ? value[1] : value; // FIXME: hack type\n\n            var existIndex = chosenValues.indexOf(dataItem.value);\n\n            if (existIndex === -1) {\n              chosenValues.push(dataItem.value);\n            } else {\n              chosenValues.splice(existIndex, 1);\n            }\n\n            return value;\n          }\n        } else {\n          /* if value is not exist before, init value */\n          return level === 2 ? [firstLevelSelectValue, [dataItem.value]] : [dataItem.value];\n        }\n      }\n\n      return level === 2 ? [_this.state.firstLevelSelectValue, dataItem.value] : [dataItem.value];\n    };\n\n    _this.onClickSubMenuItem = function (dataItem) {\n      var onChange = _this.props.onChange;\n\n      var value = _this.getSelectValue(dataItem);\n\n      _this.setState({\n        value: value\n      });\n\n      setTimeout(function () {\n        // if onChange will close the menu, set a little time to show its selection state.\n        if (onChange) {\n          onChange(value);\n        }\n      }, 300);\n    };\n\n    _this.state = {\n      firstLevelSelectValue: _this.getNewFsv(props),\n      value: props.value,\n      height: props.height\n    };\n    return _this;\n  }\n\n  _createClass(Menu, [{\n    key: 'componentWillReceiveProps',\n    value: function componentWillReceiveProps(nextProps) {\n      if (nextProps.value !== this.props.value) {\n        this.setState({\n          firstLevelSelectValue: this.getNewFsv(nextProps),\n          value: nextProps.value\n        });\n      }\n\n      if (this.props.height !== nextProps.height) {\n        this.setState({\n          height: nextProps.height\n        });\n      }\n    }\n  }, {\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      if (!('height' in this.props)) {\n        this.setState({\n          height: Math.round(document.documentElement.clientHeight / 2)\n        });\n      }\n    }\n  }, {\n    key: 'getNewFsv',\n    value: function getNewFsv(props) {\n      var value = props.value,\n          data = props.data;\n      var firstValue = '';\n\n      if (value && value.length) {\n        // if has init path, chose init first value\n        firstValue = value[0]; // this is a contract\n      } else if (data && data.length && !data[0].isLeaf) {\n        // chose the first menu item if it's not leaf.\n        firstValue = data[0].value;\n      }\n\n      return firstValue;\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this2 = this;\n\n      var _props = this.props,\n          className = _props.className,\n          style = _props.style,\n          _props$data = _props.data,\n          data = _props$data === undefined ? [] : _props$data,\n          prefixCls = _props.prefixCls,\n          level = _props.level,\n          multiSelect = _props.multiSelect,\n          multiSelectMenuBtnsCls = _props.multiSelectMenuBtnsCls,\n          MenuSelectContanerPrefixCls = _props.MenuSelectContanerPrefixCls;\n      var _state = this.state,\n          firstLevelSelectValue = _state.firstLevelSelectValue,\n          value = _state.value,\n          height = _state.height;\n      var subMenuData = data; // menu only has one level as init\n\n      if (level === 2) {\n        var parent = data;\n\n        if (firstLevelSelectValue && firstLevelSelectValue !== '') {\n          parent = data.filter(function (dataItem) {\n            return dataItem.value === firstLevelSelectValue;\n          });\n        } // tslint:disable-next-line:prefer-conditional-expression\n\n\n        if (parent[0] && parent[0].children && parent[0].isLeaf !== true) {\n          subMenuData = parent[0].children;\n        } else {\n          subMenuData = [];\n        }\n      }\n\n      var subValue = value && value.length > 0 && [].concat(_toConsumableArray(value)) || [];\n\n      if (level === 2 && subValue.length > 1) {\n        subValue.shift();\n\n        if (multiSelect) {\n          /* example: [[1,2,3]] -> [1,2,3] */\n          subValue = subValue[0]; // FIXME: hack type\n        }\n      }\n\n      var parentValue = value && value.length > 1 && level === 2 ? value[0] : null;\n      var subSelInitItem = subMenuData.filter(function (dataItem) {\n        return subValue.indexOf(dataItem.value) !== -1;\n      }).map(function (item) {\n        return item.value;\n      });\n      var showSelect = true;\n\n      if (level === 2 && parentValue !== firstLevelSelectValue) {\n        showSelect = false;\n      } // tslint:disable-next-line:variable-name\n\n\n      var _locale = getComponentLocale(this.props, this.context, 'Menu', function () {\n        return require('./locale/zh_CN');\n      });\n\n      var heightStyle = height !== undefined ? {\n        height: height + 'px'\n      } : {};\n      return React.createElement(Flex, {\n        className: classnames(prefixCls, _defineProperty({}, className, !!className)),\n        style: _extends({}, style, heightStyle),\n        direction: 'column',\n        align: 'stretch'\n      }, React.createElement(Flex, {\n        align: 'start',\n        className: classnames(_defineProperty({}, MenuSelectContanerPrefixCls, true))\n      }, level === 2 && React.createElement(Flex.Item, null, React.createElement(List, {\n        role: 'tablist'\n      }, data.map(function (dataItem, index) {\n        return React.createElement(List.Item, {\n          className: dataItem.value === firstLevelSelectValue ? prefixCls + '-selected' : '',\n          onClick: function onClick() {\n            return _this2.onClickFirstLevelItem(dataItem);\n          },\n          key: 'listitem-1-' + index,\n          role: 'tab',\n          'aria-selected': dataItem.value === firstLevelSelectValue\n        }, dataItem.label);\n      }))), React.createElement(Flex.Item, {\n        role: 'tabpanel',\n        'aria-hidden': 'false',\n        className: MenuSelectContanerPrefixCls + '-submenu'\n      }, React.createElement(SubMenu, {\n        subMenuPrefixCls: this.props.subMenuPrefixCls,\n        radioPrefixCls: this.props.radioPrefixCls,\n        subMenuData: subMenuData,\n        selItem: subSelInitItem,\n        onSel: this.onClickSubMenuItem,\n        showSelect: showSelect,\n        multiSelect: multiSelect\n      }))), multiSelect && React.createElement('div', {\n        className: multiSelectMenuBtnsCls\n      }, React.createElement(Button, {\n        inline: true,\n        className: multiSelectMenuBtnsCls + '-btn',\n        onClick: this.onMenuCancel\n      }, _locale.cancelText), React.createElement(Button, {\n        inline: true,\n        type: 'primary',\n        className: multiSelectMenuBtnsCls + '-btn',\n        onClick: this.onMenuOk\n      }, _locale.okText)));\n    }\n  }]);\n\n  return Menu;\n}(React.Component);\n\nexport default Menu;\nMenu.defaultProps = {\n  prefixCls: 'am-menu',\n  subMenuPrefixCls: 'am-sub-menu',\n  radioPrefixCls: 'am-radio',\n  multiSelectMenuBtnsCls: 'am-multi-select-btns',\n  MenuSelectContanerPrefixCls: 'am-menu-select-container',\n  data: [],\n  level: 2,\n  onChange: function onChange() {},\n  onOk: function onOk() {},\n  onCancel: function onCancel() {},\n  multiSelect: false\n};\nMenu.contextTypes = {\n  antLocale: PropTypes.object\n};","map":null,"metadata":{},"sourceType":"module"}