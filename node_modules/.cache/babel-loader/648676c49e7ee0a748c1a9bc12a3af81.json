{"ast":null,"code":"import _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _createClass from 'babel-runtime/helpers/createClass';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\n/* tslint:disable:no-bitwise */\n\nimport classnames from 'classnames';\nimport React from 'react';\nimport TouchFeedback from 'rmc-feedback';\nimport Flex from '../flex';\n\nfunction noop() {}\n\nvar ImagePicker = function (_React$Component) {\n  _inherits(ImagePicker, _React$Component);\n\n  function ImagePicker() {\n    _classCallCheck(this, ImagePicker); // http://stackoverflow.com/questions/7584794/accessing-jpeg-exif-rotation-data-in-javascript-on-the-client-side\n\n\n    var _this = _possibleConstructorReturn(this, (ImagePicker.__proto__ || Object.getPrototypeOf(ImagePicker)).apply(this, arguments));\n\n    _this.getOrientation = function (file, callback) {\n      var reader = new FileReader();\n\n      reader.onload = function (e) {\n        var view = new DataView(e.target.result);\n\n        if (view.getUint16(0, false) !== 0xffd8) {\n          return callback(-2);\n        }\n\n        var length = view.byteLength;\n        var offset = 2;\n\n        while (offset < length) {\n          var marker = view.getUint16(offset, false);\n          offset += 2;\n\n          if (marker === 0xffe1) {\n            var tmp = view.getUint32(offset += 2, false);\n\n            if (tmp !== 0x45786966) {\n              return callback(-1);\n            }\n\n            var little = view.getUint16(offset += 6, false) === 0x4949;\n            offset += view.getUint32(offset + 4, little);\n            var tags = view.getUint16(offset, little);\n            offset += 2;\n\n            for (var i = 0; i < tags; i++) {\n              if (view.getUint16(offset + i * 12, little) === 0x0112) {\n                return callback(view.getUint16(offset + i * 12 + 8, little));\n              }\n            }\n          } else if ((marker & 0xff00) !== 0xff00) {\n            break;\n          } else {\n            offset += view.getUint16(offset, false);\n          }\n        }\n\n        return callback(-1);\n      };\n\n      reader.readAsArrayBuffer(file.slice(0, 64 * 1024));\n    };\n\n    _this.getRotation = function () {\n      var orientation = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n      var imgRotation = 0;\n\n      switch (orientation) {\n        case 3:\n          imgRotation = 180;\n          break;\n\n        case 6:\n          imgRotation = 90;\n          break;\n\n        case 8:\n          imgRotation = 270;\n          break;\n\n        default:\n      }\n\n      return imgRotation;\n    };\n\n    _this.removeImage = function (index) {\n      var newImages = [];\n      var _this$props$files = _this.props.files,\n          files = _this$props$files === undefined ? [] : _this$props$files;\n      files.forEach(function (image, idx) {\n        if (index !== idx) {\n          newImages.push(image);\n        }\n      });\n\n      if (_this.props.onChange) {\n        _this.props.onChange(newImages, 'remove', index);\n      }\n    };\n\n    _this.addImage = function (imgItem) {\n      var _this$props$files2 = _this.props.files,\n          files = _this$props$files2 === undefined ? [] : _this$props$files2;\n      var newImages = files.concat(imgItem);\n\n      if (_this.props.onChange) {\n        _this.props.onChange(newImages, 'add');\n      }\n    };\n\n    _this.onImageClick = function (index) {\n      if (_this.props.onImageClick) {\n        _this.props.onImageClick(index, _this.props.files);\n      }\n    };\n\n    _this.onFileChange = function () {\n      var fileSelectorEl = _this.fileSelectorInput;\n\n      if (fileSelectorEl && fileSelectorEl.files && fileSelectorEl.files.length) {\n        var files = fileSelectorEl.files;\n        var imageParsePromiseList = [];\n\n        for (var i = 0; i < files.length; i++) {\n          imageParsePromiseList.push(_this.parseFile(files[i], i));\n        }\n\n        Promise.all(imageParsePromiseList).then(function (imageItems) {\n          return _this.addImage(imageItems);\n        })['catch'](function (error) {\n          if (_this.props.onFail) {\n            _this.props.onFail(error);\n          }\n        });\n      }\n\n      if (fileSelectorEl) {\n        fileSelectorEl.value = '';\n      }\n    };\n\n    _this.parseFile = function (file, index) {\n      return new Promise(function (resolve, reject) {\n        var reader = new FileReader();\n\n        reader.onload = function (e) {\n          var dataURL = e.target.result;\n\n          if (!dataURL) {\n            reject('Fail to get the ' + index + ' image');\n            return;\n          }\n\n          var orientation = 1;\n\n          _this.getOrientation(file, function (res) {\n            // -2: not jpeg , -1: not defined\n            if (res > 0) {\n              orientation = res;\n            }\n\n            resolve({\n              url: dataURL,\n              orientation: orientation,\n              file: file\n            });\n          });\n        };\n\n        reader.readAsDataURL(file);\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(ImagePicker, [{\n    key: 'render',\n    value: function render() {\n      var _this2 = this;\n\n      var _props = this.props,\n          prefixCls = _props.prefixCls,\n          style = _props.style,\n          className = _props.className,\n          _props$files = _props.files,\n          files = _props$files === undefined ? [] : _props$files,\n          selectable = _props.selectable,\n          onAddImageClick = _props.onAddImageClick,\n          multiple = _props.multiple,\n          accept = _props.accept,\n          capture = _props.capture;\n      var imgItemList = [];\n      var count = parseInt('' + this.props.length, 10);\n\n      if (count <= 0) {\n        count = 4;\n      }\n\n      var wrapCls = classnames('' + prefixCls, className);\n      files.forEach(function (image, index) {\n        var imgStyle = {\n          backgroundImage: 'url(' + image.url + ')',\n          transform: 'rotate(' + _this2.getRotation(image.orientation) + 'deg)'\n        };\n        var itemStyle = {};\n        imgItemList.push(React.createElement(Flex.Item, {\n          key: 'item-' + index,\n          style: itemStyle\n        }, React.createElement('div', {\n          key: index,\n          className: prefixCls + '-item'\n        }, React.createElement('div', {\n          className: prefixCls + '-item-remove',\n          role: 'button',\n          'aria-label': 'Click and Remove this image' // tslint:disable-next-line:jsx-no-multiline-js\n          ,\n          onClick: function onClick() {\n            _this2.removeImage(index);\n          }\n        }), React.createElement('div', {\n          className: prefixCls + '-item-content',\n          role: 'button',\n          'aria-label': 'Image can be clicked' // tslint:disable-next-line:jsx-no-multiline-js\n          ,\n          onClick: function onClick() {\n            _this2.onImageClick(index);\n          },\n          style: imgStyle\n        }))));\n      });\n      var selectEl = React.createElement(Flex.Item, {\n        key: 'select'\n      }, React.createElement(TouchFeedback, {\n        activeClassName: prefixCls + '-upload-btn-active'\n      }, React.createElement('div', {\n        className: prefixCls + '-item ' + prefixCls + '-upload-btn',\n        onClick: onAddImageClick,\n        role: 'button',\n        'aria-label': 'Choose and add image'\n      }, React.createElement('input', {\n        ref: function ref(input) {\n          if (input) {\n            _this2.fileSelectorInput = input;\n          }\n        },\n        type: 'file',\n        accept: accept // tslint:disable-next-line:jsx-no-multiline-js\n        ,\n        onChange: function onChange() {\n          _this2.onFileChange();\n        },\n        multiple: multiple,\n        capture: capture\n      }))));\n      var allEl = selectable ? imgItemList.concat([selectEl]) : imgItemList;\n      var length = allEl.length;\n\n      if (length !== 0 && length % count !== 0) {\n        var blankCount = count - length % count;\n        var fillBlankEl = [];\n\n        for (var i = 0; i < blankCount; i++) {\n          fillBlankEl.push(React.createElement(Flex.Item, {\n            key: 'blank-' + i\n          }));\n        }\n\n        allEl = allEl.concat(fillBlankEl);\n      }\n\n      var flexEl = [];\n\n      for (var _i = 0; _i < allEl.length / count; _i++) {\n        var rowEl = allEl.slice(_i * count, _i * count + count);\n        flexEl.push(rowEl);\n      }\n\n      var renderEl = flexEl.map(function (item, index) {\n        return React.createElement(Flex, {\n          key: 'flex-' + index\n        }, item);\n      });\n      return React.createElement('div', {\n        className: wrapCls,\n        style: style\n      }, React.createElement('div', {\n        className: prefixCls + '-list',\n        role: 'group'\n      }, renderEl));\n    }\n  }]);\n\n  return ImagePicker;\n}(React.Component);\n\nexport default ImagePicker;\nImagePicker.defaultProps = {\n  prefixCls: 'am-image-picker',\n  files: [],\n  onChange: noop,\n  onImageClick: noop,\n  onAddImageClick: noop,\n  onFail: noop,\n  selectable: true,\n  multiple: false,\n  accept: 'image/*',\n  length: 4\n};","map":null,"metadata":{},"sourceType":"module"}