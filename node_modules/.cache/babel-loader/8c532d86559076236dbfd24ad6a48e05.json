{"ast":null,"code":"import _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _createClass from 'babel-runtime/helpers/createClass';\nimport invariant from 'fbjs/lib/invariant';\nimport isEmpty from 'fbjs/lib/isEmpty';\nimport warning from 'warning';\n\nfunction defaultGetRowData(dataBlob, sectionID, rowID) {\n  return dataBlob[sectionID][rowID];\n}\n\nfunction defaultGetSectionHeaderData(dataBlob, sectionID) {\n  return dataBlob[sectionID];\n} // type differType = (data1, data2) => bool;\n//\n// type ParamType = {\n//   rowHasChanged: differType;\n//   getRowData: ?typeof defaultGetRowData;\n//   sectionHeaderHasChanged: ?differType;\n//   getSectionHeaderData: ?typeof defaultGetSectionHeaderData;\n// }\n\n/**\n * Provides efficient data processing and access to the\n * `ListView` component.  A `ListViewDataSource` is created with functions for\n * extracting data from the input blob, and comparing elements (with default\n * implementations for convenience).  The input blob can be as simple as an\n * array of strings, or an object with rows nested inside section objects.\n *\n * To update the data in the datasource, use `cloneWithRows` (or\n * `cloneWithRowsAndSections` if you care about sections).  The data in the\n * data source is immutable, so you can't modify it directly.  The clone methods\n * suck in the new data and compute a diff for each row so ListView knows\n * whether to re-render it or not.\n *\n * In this example, a component receives data in chunks, handled by\n * `_onDataArrived`, which concats the new data onto the old data and updates the\n * data source.  We use `concat` to create a new array - mutating `this._data`,\n * e.g. with `this._data.push(newRowData)`, would be an error. `_rowHasChanged`\n * understands the shape of the row data and knows how to efficiently compare\n * it.\n *\n * ```\n * getInitialState: function() {\n *   var ds = new ListViewDataSource({rowHasChanged: this._rowHasChanged});\n *   return {ds};\n * },\n * _onDataArrived(newData) {\n *   this._data = this._data.concat(newData);\n *   this.setState({\n *     ds: this.state.ds.cloneWithRows(this._data)\n *   });\n * }\n * ```\n */\n\n\nvar ListViewDataSource = function () {\n  /**\n   * You can provide custom extraction and `hasChanged` functions for section\n   * headers and rows.  If absent, data will be extracted with the\n   * `defaultGetRowData` and `defaultGetSectionHeaderData` functions.\n   *\n   * The default extractor expects data of one of the following forms:\n   *\n   *      { sectionID_1: { rowID_1: <rowData1>, ... }, ... }\n   *\n   *    or\n   *\n   *      { sectionID_1: [ <rowData1>, <rowData2>, ... ], ... }\n   *\n   *    or\n   *\n   *      [ [ <rowData1>, <rowData2>, ... ], ... ]\n   *\n   * The constructor takes in a params argument that can contain any of the\n   * following:\n   *\n   * - getRowData(dataBlob, sectionID, rowID);\n   * - getSectionHeaderData(dataBlob, sectionID);\n   * - rowHasChanged(prevRowData, nextRowData);\n   * - sectionHeaderHasChanged(prevSectionData, nextSectionData);\n   */\n  function ListViewDataSource(params) {\n    _classCallCheck(this, ListViewDataSource);\n\n    invariant(params && typeof params.rowHasChanged === 'function', 'Must provide a rowHasChanged function.');\n    this._rowHasChanged = params.rowHasChanged;\n    this._getRowData = params.getRowData || defaultGetRowData;\n    this._sectionHeaderHasChanged = params.sectionHeaderHasChanged;\n    this._getSectionHeaderData = params.getSectionHeaderData || defaultGetSectionHeaderData;\n    this._dataBlob = null;\n    this._dirtyRows = [];\n    this._dirtySections = [];\n    this._cachedRowCount = 0; // These two private variables are accessed by outsiders because ListView\n    // uses them to iterate over the data in this class.\n\n    this.rowIdentities = [];\n    this.sectionIdentities = [];\n  }\n  /**\n   * Clones this `ListViewDataSource` with the specified `dataBlob` and\n   * `rowIdentities`. The `dataBlob` is just an arbitrary blob of data. At\n   * construction an extractor to get the interesting information was defined\n   * (or the default was used).\n   *\n   * The `rowIdentities` is is a 2D array of identifiers for rows.\n   * ie. [['a1', 'a2'], ['b1', 'b2', 'b3'], ...].  If not provided, it's\n   * assumed that the keys of the section data are the row identities.\n   *\n   * Note: This function does NOT clone the data in this data source. It simply\n   * passes the functions defined at construction to a new data source with\n   * the data specified. If you wish to maintain the existing data you must\n   * handle merging of old and new data separately and then pass that into\n   * this function as the `dataBlob`.\n   */\n\n\n  _createClass(ListViewDataSource, [{\n    key: 'cloneWithRows',\n    value: function cloneWithRows(dataBlob, rowIdentities) {\n      var rowIds = rowIdentities ? [rowIdentities] : null;\n\n      if (!this._sectionHeaderHasChanged) {\n        this._sectionHeaderHasChanged = function () {\n          return false;\n        };\n      }\n\n      return this.cloneWithRowsAndSections({\n        s1: dataBlob\n      }, ['s1'], rowIds);\n    }\n    /**\n     * This performs the same function as the `cloneWithRows` function but here\n     * you also specify what your `sectionIdentities` are. If you don't care\n     * about sections you should safely be able to use `cloneWithRows`.\n     *\n     * `sectionIdentities` is an array of identifiers for  sections.\n     * ie. ['s1', 's2', ...].  If not provided, it's assumed that the\n     * keys of dataBlob are the section identities.\n     *\n     * Note: this returns a new object!\n     */\n\n  }, {\n    key: 'cloneWithRowsAndSections',\n    value: function cloneWithRowsAndSections(dataBlob, sectionIdentities, rowIdentities) {\n      invariant(typeof this._sectionHeaderHasChanged === 'function', 'Must provide a sectionHeaderHasChanged function with section data.');\n      invariant(!sectionIdentities || !rowIdentities || sectionIdentities.length === rowIdentities.length, 'row and section ids lengths must be the same');\n      var newSource = new ListViewDataSource({\n        getRowData: this._getRowData,\n        getSectionHeaderData: this._getSectionHeaderData,\n        rowHasChanged: this._rowHasChanged,\n        sectionHeaderHasChanged: this._sectionHeaderHasChanged\n      });\n      newSource._dataBlob = dataBlob;\n\n      if (sectionIdentities) {\n        newSource.sectionIdentities = sectionIdentities;\n      } else {\n        newSource.sectionIdentities = Object.keys(dataBlob);\n      }\n\n      if (rowIdentities) {\n        newSource.rowIdentities = rowIdentities;\n      } else {\n        newSource.rowIdentities = [];\n        newSource.sectionIdentities.forEach(function (sectionID) {\n          newSource.rowIdentities.push(Object.keys(dataBlob[sectionID]));\n        });\n      }\n\n      newSource._cachedRowCount = countRows(newSource.rowIdentities);\n\n      newSource._calculateDirtyArrays(this._dataBlob, this.sectionIdentities, this.rowIdentities);\n\n      return newSource;\n    }\n  }, {\n    key: 'getRowCount',\n    value: function getRowCount() {\n      return this._cachedRowCount;\n    }\n  }, {\n    key: 'getRowAndSectionCount',\n    value: function getRowAndSectionCount() {\n      return this._cachedRowCount + this.sectionIdentities.length;\n    }\n    /**\n     * Returns if the row is dirtied and needs to be rerendered\n     */\n\n  }, {\n    key: 'rowShouldUpdate',\n    value: function rowShouldUpdate(sectionIndex, rowIndex) {\n      var needsUpdate = this._dirtyRows[sectionIndex][rowIndex];\n      warning(needsUpdate !== undefined, 'missing dirtyBit for section, row: ' + sectionIndex + ', ' + rowIndex);\n      return needsUpdate;\n    }\n    /**\n     * Gets the data required to render the row.\n     */\n\n  }, {\n    key: 'getRowData',\n    value: function getRowData(sectionIndex, rowIndex) {\n      var sectionID = this.sectionIdentities[sectionIndex];\n      var rowID = this.rowIdentities[sectionIndex][rowIndex];\n      warning(sectionID !== undefined && rowID !== undefined, 'rendering invalid section, row: ' + sectionIndex + ', ' + rowIndex);\n      return this._getRowData(this._dataBlob, sectionID, rowID);\n    }\n    /**\n     * Gets the rowID at index provided if the dataSource arrays were flattened,\n     * or null of out of range indexes.\n     */\n\n  }, {\n    key: 'getRowIDForFlatIndex',\n    value: function getRowIDForFlatIndex(index) {\n      var accessIndex = index;\n\n      for (var ii = 0; ii < this.sectionIdentities.length; ii++) {\n        if (accessIndex >= this.rowIdentities[ii].length) {\n          accessIndex -= this.rowIdentities[ii].length;\n        } else {\n          return this.rowIdentities[ii][accessIndex];\n        }\n      }\n\n      return null;\n    }\n    /**\n     * Gets the sectionID at index provided if the dataSource arrays were flattened,\n     * or null for out of range indexes.\n     */\n\n  }, {\n    key: 'getSectionIDForFlatIndex',\n    value: function getSectionIDForFlatIndex(index) {\n      var accessIndex = index;\n\n      for (var ii = 0; ii < this.sectionIdentities.length; ii++) {\n        if (accessIndex >= this.rowIdentities[ii].length) {\n          accessIndex -= this.rowIdentities[ii].length;\n        } else {\n          return this.sectionIdentities[ii];\n        }\n      }\n\n      return null;\n    }\n    /**\n     * Returns an array containing the number of rows in each section\n     */\n\n  }, {\n    key: 'getSectionLengths',\n    value: function getSectionLengths() {\n      var results = [];\n\n      for (var ii = 0; ii < this.sectionIdentities.length; ii++) {\n        results.push(this.rowIdentities[ii].length);\n      }\n\n      return results;\n    }\n    /**\n     * Returns if the section header is dirtied and needs to be rerendered\n     */\n\n  }, {\n    key: 'sectionHeaderShouldUpdate',\n    value: function sectionHeaderShouldUpdate(sectionIndex) {\n      var needsUpdate = this._dirtySections[sectionIndex];\n      warning(needsUpdate !== undefined, 'missing dirtyBit for section: ' + sectionIndex);\n      return needsUpdate;\n    }\n    /**\n     * Gets the data required to render the section header\n     */\n\n  }, {\n    key: 'getSectionHeaderData',\n    value: function getSectionHeaderData(sectionIndex) {\n      if (!this._getSectionHeaderData) {\n        return null;\n      }\n\n      var sectionID = this.sectionIdentities[sectionIndex];\n      warning(sectionID !== undefined, 'renderSection called on invalid section: ' + sectionIndex);\n      return this._getSectionHeaderData(this._dataBlob, sectionID);\n    }\n    /**\n     * Private members and methods.\n     */\n    // These two 'protected' variables are accessed by ListView to iterate over\n    // the data in this class.\n\n  }, {\n    key: '_calculateDirtyArrays',\n    value: function _calculateDirtyArrays(prevDataBlob, prevSectionIDs, prevRowIDs) {\n      // construct a hashmap of the existing (old) id arrays\n      var prevSectionsHash = keyedDictionaryFromArray(prevSectionIDs);\n      var prevRowsHash = {};\n\n      for (var ii = 0; ii < prevRowIDs.length; ii++) {\n        var sectionID = prevSectionIDs[ii];\n        warning(!prevRowsHash[sectionID], 'SectionID appears more than once: ' + sectionID);\n        prevRowsHash[sectionID] = keyedDictionaryFromArray(prevRowIDs[ii]);\n      } // compare the 2 identity array and get the dirtied rows\n\n\n      this._dirtySections = [];\n      this._dirtyRows = [];\n      var dirty;\n\n      for (var sIndex = 0; sIndex < this.sectionIdentities.length; sIndex++) {\n        var sectionID = this.sectionIdentities[sIndex]; // dirty if the sectionHeader is new or _sectionHasChanged is true\n\n        dirty = !prevSectionsHash[sectionID];\n        var sectionHeaderHasChanged = this._sectionHeaderHasChanged;\n\n        if (!dirty && sectionHeaderHasChanged) {\n          dirty = sectionHeaderHasChanged(this._getSectionHeaderData(prevDataBlob, sectionID), this._getSectionHeaderData(this._dataBlob, sectionID));\n        }\n\n        this._dirtySections.push(!!dirty);\n\n        this._dirtyRows[sIndex] = [];\n\n        for (var rIndex = 0; rIndex < this.rowIdentities[sIndex].length; rIndex++) {\n          var rowID = this.rowIdentities[sIndex][rIndex]; // dirty if the section is new, row is new or _rowHasChanged is true\n\n          dirty = !prevSectionsHash[sectionID] || !prevRowsHash[sectionID][rowID] || this._rowHasChanged(this._getRowData(prevDataBlob, sectionID, rowID), this._getRowData(this._dataBlob, sectionID, rowID));\n\n          this._dirtyRows[sIndex].push(!!dirty);\n        }\n      }\n    }\n  }]);\n\n  return ListViewDataSource;\n}();\n\nfunction countRows(allRowIDs) {\n  var totalRows = 0;\n\n  for (var sectionIdx = 0; sectionIdx < allRowIDs.length; sectionIdx++) {\n    var rowIDs = allRowIDs[sectionIdx];\n    totalRows += rowIDs.length;\n  }\n\n  return totalRows;\n}\n\nfunction keyedDictionaryFromArray(arr) {\n  if (isEmpty(arr)) {\n    return {};\n  }\n\n  var result = {};\n\n  for (var ii = 0; ii < arr.length; ii++) {\n    var key = arr[ii];\n    warning(!result[key], 'Value appears more than once in array: ' + key);\n    result[key] = true;\n  }\n\n  return result;\n} // module.exports = ListViewDataSource;\n\n\nexport default ListViewDataSource;","map":null,"metadata":{},"sourceType":"module"}