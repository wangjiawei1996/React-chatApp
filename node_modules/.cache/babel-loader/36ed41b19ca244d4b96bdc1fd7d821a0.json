{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _createClass from 'babel-runtime/helpers/createClass';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport React from 'react';\nimport MultiPicker from 'rmc-picker/es/MultiPicker';\nimport Picker from 'rmc-picker/lib/Picker';\nimport defaultLocale from './locale/en_US';\n\nfunction getDaysInMonth(date) {\n  return new Date(date.getFullYear(), date.getMonth() + 1, 0).getDate();\n}\n\nfunction pad(n) {\n  return n < 10 ? '0' + n : n + '';\n}\n\nfunction cloneDate(date) {\n  return new Date(+date);\n}\n\nfunction setMonth(date, month) {\n  date.setDate(Math.min(date.getDate(), getDaysInMonth(new Date(date.getFullYear(), month))));\n  date.setMonth(month);\n}\n\nvar DATETIME = 'datetime';\nvar DATE = 'date';\nvar TIME = 'time';\nvar MONTH = 'month';\nvar YEAR = 'year';\nvar ONE_DAY = 24 * 60 * 60 * 1000;\n\nvar DatePicker = function (_React$Component) {\n  _inherits(DatePicker, _React$Component);\n\n  function DatePicker() {\n    _classCallCheck(this, DatePicker);\n\n    var _this = _possibleConstructorReturn(this, (DatePicker.__proto__ || Object.getPrototypeOf(DatePicker)).apply(this, arguments));\n\n    _this.state = {\n      date: _this.props.date || _this.props.defaultDate\n    };\n\n    _this.getNewDate = function (values, index) {\n      var value = parseInt(values[index], 10);\n      var props = _this.props;\n      var mode = props.mode;\n      var newValue = cloneDate(_this.getDate());\n\n      if (mode === DATETIME || mode === DATE || mode === YEAR || mode === MONTH) {\n        switch (index) {\n          case 0:\n            newValue.setFullYear(value);\n            break;\n\n          case 1:\n            setMonth(newValue, value);\n            break;\n\n          case 2:\n            newValue.setDate(value);\n            break;\n\n          case 3:\n            _this.setHours(newValue, value);\n\n            break;\n\n          case 4:\n            newValue.setMinutes(value);\n            break;\n\n          case 5:\n            _this.setAmPm(newValue, value);\n\n            break;\n\n          default:\n            break;\n        }\n      } else if (mode === TIME) {\n        switch (index) {\n          case 0:\n            _this.setHours(newValue, value);\n\n            break;\n\n          case 1:\n            newValue.setMinutes(value);\n            break;\n\n          case 2:\n            _this.setAmPm(newValue, value);\n\n            break;\n\n          default:\n            break;\n        }\n      }\n\n      return _this.clipDate(newValue);\n    };\n\n    _this.onValueChange = function (values, index) {\n      var props = _this.props;\n\n      var newValue = _this.getNewDate(values, index);\n\n      if (!('date' in props)) {\n        _this.setState({\n          date: newValue\n        });\n      }\n\n      if (props.onDateChange) {\n        props.onDateChange(newValue);\n      }\n\n      if (props.onValueChange) {\n        props.onValueChange(values, index);\n      }\n    };\n\n    _this.onScrollChange = function (values, index) {\n      var props = _this.props;\n\n      if (props.onScrollChange) {\n        var newValue = _this.getNewDate(values, index);\n\n        props.onScrollChange(newValue, values, index);\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(DatePicker, [{\n    key: 'componentWillReceiveProps',\n    value: function componentWillReceiveProps(nextProps) {\n      if ('date' in nextProps) {\n        this.setState({\n          date: nextProps.date || nextProps.defaultDate\n        });\n      }\n    }\n  }, {\n    key: 'setHours',\n    value: function setHours(date, hour) {\n      if (this.props.use12Hours) {\n        var dh = date.getHours();\n        var nhour = hour;\n        nhour = dh >= 12 ? hour + 12 : hour;\n        nhour = nhour >= 24 ? 0 : nhour;\n        date.setHours(nhour);\n      } else {\n        date.setHours(hour);\n      }\n    }\n  }, {\n    key: 'setAmPm',\n    value: function setAmPm(date, index) {\n      if (index === 0) {\n        date.setTime(+date - ONE_DAY / 2);\n      } else {\n        date.setTime(+date + ONE_DAY / 2);\n      }\n    }\n  }, {\n    key: 'getDefaultMinDate',\n    value: function getDefaultMinDate() {\n      if (!this.defaultMinDate) {\n        this.defaultMinDate = new Date(2000, 1, 1, 0, 0, 0);\n      }\n\n      return this.defaultMinDate;\n    }\n  }, {\n    key: 'getDefaultMaxDate',\n    value: function getDefaultMaxDate() {\n      if (!this.defaultMaxDate) {\n        this.defaultMaxDate = new Date(2030, 1, 1, 23, 59, 59);\n      }\n\n      return this.defaultMaxDate;\n    }\n  }, {\n    key: 'getDate',\n    value: function getDate() {\n      return this.clipDate(this.state.date || this.getDefaultMinDate());\n    }\n  }, {\n    key: 'getValue',\n    value: function getValue() {\n      return this.getDate();\n    }\n  }, {\n    key: 'getMinYear',\n    value: function getMinYear() {\n      return this.getMinDate().getFullYear();\n    }\n  }, {\n    key: 'getMaxYear',\n    value: function getMaxYear() {\n      return this.getMaxDate().getFullYear();\n    }\n  }, {\n    key: 'getMinMonth',\n    value: function getMinMonth() {\n      return this.getMinDate().getMonth();\n    }\n  }, {\n    key: 'getMaxMonth',\n    value: function getMaxMonth() {\n      return this.getMaxDate().getMonth();\n    }\n  }, {\n    key: 'getMinDay',\n    value: function getMinDay() {\n      return this.getMinDate().getDate();\n    }\n  }, {\n    key: 'getMaxDay',\n    value: function getMaxDay() {\n      return this.getMaxDate().getDate();\n    }\n  }, {\n    key: 'getMinHour',\n    value: function getMinHour() {\n      return this.getMinDate().getHours();\n    }\n  }, {\n    key: 'getMaxHour',\n    value: function getMaxHour() {\n      return this.getMaxDate().getHours();\n    }\n  }, {\n    key: 'getMinMinute',\n    value: function getMinMinute() {\n      return this.getMinDate().getMinutes();\n    }\n  }, {\n    key: 'getMaxMinute',\n    value: function getMaxMinute() {\n      return this.getMaxDate().getMinutes();\n    }\n  }, {\n    key: 'getMinDate',\n    value: function getMinDate() {\n      return this.props.minDate || this.getDefaultMinDate();\n    }\n  }, {\n    key: 'getMaxDate',\n    value: function getMaxDate() {\n      return this.props.maxDate || this.getDefaultMaxDate();\n    }\n  }, {\n    key: 'getDateData',\n    value: function getDateData() {\n      var _props = this.props,\n          locale = _props.locale,\n          formatMonth = _props.formatMonth,\n          formatDay = _props.formatDay,\n          mode = _props.mode;\n      var date = this.getDate();\n      var selYear = date.getFullYear();\n      var selMonth = date.getMonth();\n      var minDateYear = this.getMinYear();\n      var maxDateYear = this.getMaxYear();\n      var minDateMonth = this.getMinMonth();\n      var maxDateMonth = this.getMaxMonth();\n      var minDateDay = this.getMinDay();\n      var maxDateDay = this.getMaxDay();\n      var years = [];\n\n      for (var i = minDateYear; i <= maxDateYear; i++) {\n        years.push({\n          value: i + '',\n          label: i + locale.year + ''\n        });\n      }\n\n      var yearCol = {\n        key: 'year',\n        props: {\n          children: years\n        }\n      };\n\n      if (mode === YEAR) {\n        return [yearCol];\n      }\n\n      var months = [];\n      var minMonth = 0;\n      var maxMonth = 11;\n\n      if (minDateYear === selYear) {\n        minMonth = minDateMonth;\n      }\n\n      if (maxDateYear === selYear) {\n        maxMonth = maxDateMonth;\n      }\n\n      for (var _i = minMonth; _i <= maxMonth; _i++) {\n        var label = formatMonth ? formatMonth(_i, date) : _i + 1 + locale.month + '';\n        months.push({\n          value: _i + '',\n          label: label\n        });\n      }\n\n      var monthCol = {\n        key: 'month',\n        props: {\n          children: months\n        }\n      };\n\n      if (mode === MONTH) {\n        return [yearCol, monthCol];\n      }\n\n      var days = [];\n      var minDay = 1;\n      var maxDay = getDaysInMonth(date);\n\n      if (minDateYear === selYear && minDateMonth === selMonth) {\n        minDay = minDateDay;\n      }\n\n      if (maxDateYear === selYear && maxDateMonth === selMonth) {\n        maxDay = maxDateDay;\n      }\n\n      for (var _i2 = minDay; _i2 <= maxDay; _i2++) {\n        var _label = formatDay ? formatDay(_i2, date) : _i2 + locale.day + '';\n\n        days.push({\n          value: _i2 + '',\n          label: _label\n        });\n      }\n\n      return [yearCol, monthCol, {\n        key: 'day',\n        props: {\n          children: days\n        }\n      }];\n    }\n  }, {\n    key: 'getDisplayHour',\n    value: function getDisplayHour(rawHour) {\n      if (this.props.use12Hours) {\n        if (rawHour === 0) {\n          rawHour = 12;\n        }\n\n        if (rawHour > 12) {\n          rawHour -= 12;\n        }\n\n        return rawHour;\n      }\n\n      return rawHour;\n    }\n  }, {\n    key: 'getTimeData',\n    value: function getTimeData(date) {\n      var _props2 = this.props,\n          _props2$minHour = _props2.minHour,\n          minHour = _props2$minHour === undefined ? 0 : _props2$minHour,\n          _props2$maxHour = _props2.maxHour,\n          maxHour = _props2$maxHour === undefined ? 23 : _props2$maxHour,\n          _props2$minMinute = _props2.minMinute,\n          minMinute = _props2$minMinute === undefined ? 0 : _props2$minMinute,\n          _props2$maxMinute = _props2.maxMinute,\n          maxMinute = _props2$maxMinute === undefined ? 59 : _props2$maxMinute;\n      var _props3 = this.props,\n          mode = _props3.mode,\n          locale = _props3.locale,\n          minuteStep = _props3.minuteStep,\n          use12Hours = _props3.use12Hours;\n      var minDateMinute = this.getMinMinute();\n      var maxDateMinute = this.getMaxMinute();\n      var minDateHour = this.getMinHour();\n      var maxDateHour = this.getMaxHour();\n      var hour = date.getHours();\n\n      if (mode === DATETIME) {\n        var year = date.getFullYear();\n        var month = date.getMonth();\n        var day = date.getDate();\n        var minDateYear = this.getMinYear();\n        var maxDateYear = this.getMaxYear();\n        var minDateMonth = this.getMinMonth();\n        var maxDateMonth = this.getMaxMonth();\n        var minDateDay = this.getMinDay();\n        var maxDateDay = this.getMaxDay();\n\n        if (minDateYear === year && minDateMonth === month && minDateDay === day) {\n          minHour = minDateHour;\n\n          if (minDateHour === hour) {\n            minMinute = minDateMinute;\n          }\n        }\n\n        if (maxDateYear === year && maxDateMonth === month && maxDateDay === day) {\n          maxHour = maxDateHour;\n\n          if (maxDateHour === hour) {\n            maxMinute = maxDateMinute;\n          }\n        }\n      } else {\n        minHour = minDateHour;\n\n        if (minDateHour === hour) {\n          minMinute = minDateMinute;\n        }\n\n        maxHour = maxDateHour;\n\n        if (maxDateHour === hour) {\n          maxMinute = maxDateMinute;\n        }\n      }\n\n      var hours = [];\n\n      if (minHour === 0 && maxHour === 0 || minHour !== 0 && maxHour !== 0) {\n        minHour = this.getDisplayHour(minHour);\n      } else if (minHour === 0 && use12Hours) {\n        minHour = 1;\n        hours.push({\n          value: '0',\n          label: locale.hour ? '12' + locale.hour : '12'\n        });\n      }\n\n      maxHour = this.getDisplayHour(maxHour);\n\n      for (var i = minHour; i <= maxHour; i++) {\n        hours.push({\n          value: i + '',\n          label: locale.hour ? i + locale.hour + '' : pad(i)\n        });\n      }\n\n      var minutes = [];\n      var selMinute = date.getMinutes();\n\n      for (var _i3 = minMinute; _i3 <= maxMinute; _i3 += minuteStep) {\n        minutes.push({\n          value: _i3 + '',\n          label: locale.minute ? _i3 + locale.minute + '' : pad(_i3)\n        });\n\n        if (selMinute > _i3 && selMinute < _i3 + minuteStep) {\n          minutes.push({\n            value: selMinute + '',\n            label: locale.minute ? selMinute + locale.minute + '' : pad(selMinute)\n          });\n        }\n      }\n\n      var cols = [{\n        key: 'hours',\n        props: {\n          children: hours\n        }\n      }, {\n        key: 'minutes',\n        props: {\n          children: minutes\n        }\n      }].concat(use12Hours ? [{\n        key: 'ampm',\n        props: {\n          children: [{\n            value: '0',\n            label: locale.am\n          }, {\n            value: '1',\n            label: locale.pm\n          }]\n        }\n      }] : []);\n      return {\n        cols: cols,\n        selMinute: selMinute\n      };\n    }\n  }, {\n    key: 'clipDate',\n    value: function clipDate(date) {\n      var mode = this.props.mode;\n      var minDate = this.getMinDate();\n      var maxDate = this.getMaxDate();\n\n      if (mode === DATETIME) {\n        if (date < minDate) {\n          return cloneDate(minDate);\n        }\n\n        if (date > maxDate) {\n          return cloneDate(maxDate);\n        }\n      } else if (mode === DATE || mode === YEAR || mode === MONTH) {\n        if (+date + ONE_DAY <= minDate) {\n          return cloneDate(minDate);\n        }\n\n        if (date >= +maxDate + ONE_DAY) {\n          return cloneDate(maxDate);\n        }\n      } else if (mode === TIME) {\n        var maxHour = maxDate.getHours();\n        var maxMinutes = maxDate.getMinutes();\n        var minHour = minDate.getHours();\n        var minMinutes = minDate.getMinutes();\n        var hour = date.getHours();\n        var minutes = date.getMinutes();\n\n        if (hour < minHour || hour === minHour && minutes < minMinutes) {\n          return cloneDate(minDate);\n        }\n\n        if (hour > maxHour || hour === maxHour && minutes > maxMinutes) {\n          return cloneDate(maxDate);\n        }\n      }\n\n      return date;\n    }\n  }, {\n    key: 'getValueCols',\n    value: function getValueCols() {\n      var _props4 = this.props,\n          mode = _props4.mode,\n          use12Hours = _props4.use12Hours;\n      var date = this.getDate();\n      var cols = [];\n      var value = [];\n\n      if (mode === YEAR) {\n        return {\n          cols: this.getDateData(),\n          value: [date.getFullYear() + '']\n        };\n      }\n\n      if (mode === MONTH) {\n        return {\n          cols: this.getDateData(),\n          value: [date.getFullYear() + '', date.getMonth() + '']\n        };\n      }\n\n      if (mode === DATETIME || mode === DATE) {\n        cols = this.getDateData();\n        value = [date.getFullYear() + '', date.getMonth() + '', date.getDate() + ''];\n      }\n\n      if (mode === DATETIME || mode === TIME) {\n        var time = this.getTimeData(date);\n        cols = cols.concat(time.cols);\n        var hour = date.getHours();\n        var dtValue = [hour + '', time.selMinute + ''];\n        var nhour = hour;\n\n        if (use12Hours) {\n          nhour = hour === 0 ? 12 : hour > 12 ? hour - 12 : hour;\n          dtValue = [nhour + '', time.selMinute + '', (hour >= 12 ? 1 : 0) + ''];\n        }\n\n        value = value.concat(dtValue);\n      }\n\n      return {\n        value: value,\n        cols: cols\n      };\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _getValueCols = this.getValueCols(),\n          value = _getValueCols.value,\n          cols = _getValueCols.cols;\n\n      var _props5 = this.props,\n          disabled = _props5.disabled,\n          pickerPrefixCls = _props5.pickerPrefixCls,\n          prefixCls = _props5.prefixCls,\n          rootNativeProps = _props5.rootNativeProps,\n          className = _props5.className,\n          style = _props5.style,\n          itemStyle = _props5.itemStyle;\n\n      var multiStyle = _extends({\n        flexDirection: 'row',\n        alignItems: 'center'\n      }, style);\n\n      return React.createElement(MultiPicker, {\n        style: multiStyle,\n        rootNativeProps: rootNativeProps,\n        className: className,\n        prefixCls: prefixCls,\n        selectedValue: value,\n        onValueChange: this.onValueChange,\n        onScrollChange: this.onScrollChange\n      }, cols.map(function (p) {\n        return React.createElement(Picker, {\n          style: {\n            flex: 1\n          },\n          key: p.key,\n          disabled: disabled,\n          prefixCls: pickerPrefixCls,\n          itemStyle: itemStyle\n        }, p.props.children.map(function (item) {\n          return React.createElement(Picker.Item, {\n            key: item.value,\n            value: item.value\n          }, item.label);\n        }));\n      }));\n    }\n  }]);\n\n  return DatePicker;\n}(React.Component);\n\nDatePicker.defaultProps = {\n  prefixCls: 'rmc-date-picker',\n  pickerPrefixCls: 'rmc-picker',\n  locale: defaultLocale,\n  mode: DATE,\n  disabled: false,\n  minuteStep: 1,\n  onDateChange: function onDateChange() {},\n  use12Hours: false\n};\nexport default DatePicker;","map":null,"metadata":{},"sourceType":"module"}