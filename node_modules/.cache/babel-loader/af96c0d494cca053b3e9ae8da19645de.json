{"ast":null,"code":"import _defineProperty from 'babel-runtime/helpers/defineProperty';\nimport _extends from 'babel-runtime/helpers/extends';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _createClass from 'babel-runtime/helpers/createClass';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport React from 'react';\nimport classNames from 'classnames';\nimport BaseComponent from './base';\nimport InputHandler from './InputHandler';\n\nfunction noop() {}\n\nfunction preventDefault(e) {\n  e.preventDefault();\n}\n\nvar InputNumber = function (_BaseComponent) {\n  _inherits(InputNumber, _BaseComponent);\n\n  function InputNumber() {\n    _classCallCheck(this, InputNumber);\n\n    var _this = _possibleConstructorReturn(this, (InputNumber.__proto__ || Object.getPrototypeOf(InputNumber)).apply(this, arguments));\n\n    _this.setInput = function (input) {\n      _this.input = input;\n    };\n\n    return _this;\n  }\n\n  _createClass(InputNumber, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      this.componentDidUpdate();\n    }\n  }, {\n    key: 'componentWillUpdate',\n    value: function componentWillUpdate() {\n      try {\n        this.start = this.input.selectionStart;\n        this.end = this.input.selectionEnd;\n      } catch (e) {// Fix error in Chrome:\n        // Failed to read the 'selectionStart' property from 'HTMLInputElement'\n        // http://stackoverflow.com/q/21177489/3040605\n      }\n    }\n  }, {\n    key: 'componentDidUpdate',\n    value: function componentDidUpdate() {\n      if (this.props.focusOnUpDown && this.state.focused) {\n        var selectionRange = this.input.setSelectionRange;\n\n        if (selectionRange && typeof selectionRange === 'function' && this.start !== undefined && this.end !== undefined && this.start !== this.end) {\n          this.input.setSelectionRange(this.start, this.end);\n        } else {\n          this.focus();\n        }\n      }\n    }\n  }, {\n    key: 'getRatio',\n    value: function getRatio(e) {\n      var ratio = 1;\n\n      if (e.metaKey || e.ctrlKey) {\n        ratio = 0.1;\n      } else if (e.shiftKey) {\n        ratio = 10;\n      }\n\n      return ratio;\n    }\n  }, {\n    key: 'getValueFromEvent',\n    value: function getValueFromEvent(e) {\n      return e.target.value;\n    }\n  }, {\n    key: 'focus',\n    value: function focus() {\n      this.input.focus();\n    }\n  }, {\n    key: 'formatWrapper',\n    value: function formatWrapper(num) {\n      if (this.props.formatter) {\n        return this.props.formatter(num);\n      }\n\n      return num;\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _classNames;\n\n      var props = _extends({}, this.props);\n\n      var _props$prefixCls = props.prefixCls,\n          prefixCls = _props$prefixCls === undefined ? '' : _props$prefixCls,\n          disabled = props.disabled,\n          readOnly = props.readOnly,\n          max = props.max,\n          min = props.min;\n      var classes = classNames((_classNames = {}, _defineProperty(_classNames, prefixCls, true), _defineProperty(_classNames, props.className, !!props.className), _defineProperty(_classNames, prefixCls + '-disabled', disabled), _defineProperty(_classNames, prefixCls + '-focused', this.state.focused), _classNames));\n      var upDisabledClass = '';\n      var downDisabledClass = '';\n      var value = this.state.value;\n\n      if (value || value === 0) {\n        if (!isNaN(value)) {\n          var val = Number(value);\n\n          if (val >= max) {\n            upDisabledClass = prefixCls + '-handler-up-disabled';\n          }\n\n          if (val <= min) {\n            downDisabledClass = prefixCls + '-handler-down-disabled';\n          }\n        } else {\n          upDisabledClass = prefixCls + '-handler-up-disabled';\n          downDisabledClass = prefixCls + '-handler-down-disabled';\n        }\n      }\n\n      var editable = !props.readOnly && !props.disabled; // focus state, show input value\n      // unfocus state, show valid value\n\n      var inputDisplayValue = void 0;\n\n      if (this.state.focused) {\n        inputDisplayValue = this.state.inputValue;\n      } else {\n        inputDisplayValue = this.toPrecisionAsStep(this.state.value);\n      }\n\n      if (inputDisplayValue === undefined || inputDisplayValue === null) {\n        inputDisplayValue = '';\n      }\n\n      var upEvents = void 0;\n      var downEvents = void 0;\n      upEvents = {\n        onTouchStart: editable && !upDisabledClass ? this.up : noop,\n        onTouchEnd: this.stop\n      };\n      downEvents = {\n        onTouchStart: editable && !downDisabledClass ? this.down : noop,\n        onTouchEnd: this.stop\n      };\n      var inputDisplayValueFormat = this.formatWrapper(inputDisplayValue);\n      var isUpDisabled = !!upDisabledClass || disabled || readOnly;\n      var isDownDisabled = !!downDisabledClass || disabled || readOnly;\n      return React.createElement('div', {\n        className: classes,\n        style: props.style\n      }, React.createElement('div', {\n        className: prefixCls + '-handler-wrap'\n      }, React.createElement(InputHandler, _extends({\n        disabled: isUpDisabled,\n        prefixCls: prefixCls,\n        unselectable: 'unselectable'\n      }, upEvents, {\n        role: 'button',\n        'aria-label': 'Increase Value',\n        'aria-disabled': !!isUpDisabled,\n        className: prefixCls + '-handler ' + prefixCls + '-handler-up ' + upDisabledClass\n      }), this.props.upHandler || React.createElement('span', {\n        unselectable: 'unselectable',\n        className: prefixCls + '-handler-up-inner',\n        onClick: preventDefault\n      })), React.createElement(InputHandler, _extends({\n        disabled: isDownDisabled,\n        prefixCls: prefixCls,\n        unselectable: 'unselectable'\n      }, downEvents, {\n        role: 'button',\n        'aria-label': 'Decrease Value',\n        'aria-disabled': !!isDownDisabled,\n        className: prefixCls + '-handler ' + prefixCls + '-handler-down ' + downDisabledClass\n      }), this.props.downHandler || React.createElement('span', {\n        unselectable: 'unselectable',\n        className: prefixCls + '-handler-down-inner',\n        onClick: preventDefault\n      }))), React.createElement('div', {\n        className: prefixCls + '-input-wrap',\n        role: 'spinbutton',\n        'aria-valuemin': props.min,\n        'aria-valuemax': props.max,\n        'aria-valuenow': value\n      }, React.createElement('input', {\n        className: prefixCls + '-input',\n        tabIndex: props.tabIndex,\n        autoComplete: 'off',\n        onFocus: this.onFocus,\n        onBlur: this.onBlur,\n        autoFocus: props.autoFocus,\n        readOnly: props.readOnly,\n        disabled: props.disabled,\n        max: props.max,\n        min: props.min,\n        step: props.step,\n        onChange: this.onChange,\n        ref: this.setInput,\n        value: inputDisplayValueFormat\n      })));\n    }\n  }]);\n\n  return InputNumber;\n}(BaseComponent);\n\nexport default InputNumber;\nInputNumber.defaultProps = _extends({}, BaseComponent.defaultProps, {\n  focusOnUpDown: false,\n  useTouch: false,\n  prefixCls: 'rmc-input-number'\n});","map":null,"metadata":{},"sourceType":"module"}