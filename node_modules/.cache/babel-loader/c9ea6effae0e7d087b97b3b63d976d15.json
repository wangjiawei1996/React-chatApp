{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _createClass from 'babel-runtime/helpers/createClass';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport React from 'react';\nimport Badge from '../badge';\n\nvar Tab = function (_React$PureComponent) {\n  _inherits(Tab, _React$PureComponent);\n\n  function Tab() {\n    _classCallCheck(this, Tab);\n\n    var _this = _possibleConstructorReturn(this, (Tab.__proto__ || Object.getPrototypeOf(Tab)).apply(this, arguments));\n\n    _this.renderIcon = function () {\n      var _this$props = _this.props,\n          dot = _this$props.dot,\n          badge = _this$props.badge,\n          selected = _this$props.selected,\n          selectedIcon = _this$props.selectedIcon,\n          icon = _this$props.icon,\n          title = _this$props.title,\n          prefixCls = _this$props.prefixCls;\n      var iconRes = selected ? selectedIcon : icon;\n      var iconDom = React.isValidElement(iconRes) ? iconRes : React.createElement('img', {\n        className: prefixCls + '-image',\n        src: iconRes ? iconRes.uri : iconRes,\n        alt: title\n      });\n\n      if (badge) {\n        return React.createElement(Badge, {\n          text: badge,\n          className: prefixCls + '-badge tab-badge'\n        }, ' ', iconDom, ' ');\n      }\n\n      if (dot) {\n        return React.createElement(Badge, {\n          dot: true,\n          className: prefixCls + '-badge tab-dot'\n        }, iconDom);\n      }\n\n      return iconDom;\n    };\n\n    _this.onClick = function () {\n      var onClick = _this.props.onClick;\n\n      if (onClick) {\n        onClick();\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(Tab, [{\n    key: 'render',\n    value: function render() {\n      var _props = this.props,\n          title = _props.title,\n          prefixCls = _props.prefixCls,\n          selected = _props.selected,\n          unselectedTintColor = _props.unselectedTintColor,\n          tintColor = _props.tintColor;\n      var iconColor = selected ? tintColor : unselectedTintColor;\n      return React.createElement('div', _extends({}, this.props.dataAttrs, {\n        onClick: this.onClick,\n        className: '' + prefixCls\n      }), React.createElement('div', {\n        className: prefixCls + '-icon',\n        style: {\n          color: iconColor\n        }\n      }, this.renderIcon()), React.createElement('p', {\n        className: prefixCls + '-title',\n        style: {\n          color: selected ? tintColor : unselectedTintColor\n        }\n      }, title));\n    }\n  }]);\n\n  return Tab;\n}(React.PureComponent);\n\nexport default Tab;","map":null,"metadata":{},"sourceType":"module"}