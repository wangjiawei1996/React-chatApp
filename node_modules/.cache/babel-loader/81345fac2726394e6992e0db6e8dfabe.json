{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _createClass from 'babel-runtime/helpers/createClass';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport React from 'react';\nimport Trigger from './Trigger';\n\nfunction noop() {}\n\nfunction returnEmptyString() {\n  return '';\n}\n\nfunction returnDocument() {\n  return window.document;\n}\n\nvar TriggerWrap = function (_React$Component) {\n  _inherits(TriggerWrap, _React$Component);\n\n  function TriggerWrap(props) {\n    _classCallCheck(this, TriggerWrap);\n\n    var _this = _possibleConstructorReturn(this, (TriggerWrap.__proto__ || Object.getPrototypeOf(TriggerWrap)).call(this, props));\n\n    _this.onTargetClick = function () {\n      _this.setPopupVisible(!_this.state.popupVisible);\n    };\n\n    _this.onClose = function () {\n      _this.setPopupVisible(false);\n    };\n\n    var popupVisible = void 0;\n\n    if ('popupVisible' in props) {\n      popupVisible = !!props.popupVisible;\n    } else {\n      popupVisible = !!props.defaultPopupVisible;\n    }\n\n    _this.state = {\n      popupVisible: popupVisible\n    };\n    return _this;\n  }\n\n  _createClass(TriggerWrap, [{\n    key: 'componentWillReceiveProps',\n    value: function componentWillReceiveProps(nextProps) {\n      if (nextProps.visible !== undefined) {\n        this.setPopupVisible(nextProps.visible);\n      }\n    }\n  }, {\n    key: 'setPopupVisible',\n    value: function setPopupVisible(visible) {\n      if (this.state.popupVisible !== visible) {\n        this.setState({\n          popupVisible: visible\n        });\n        this.props.onPopupVisibleChange(visible);\n      }\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(Trigger, _extends({\n        ref: function ref(el) {\n          return _this2.triggerRef = el;\n        }\n      }, this.props, {\n        visible: this.state.popupVisible,\n        onTargetClick: this.onTargetClick,\n        onClose: this.onClose\n      }));\n    }\n  }]);\n\n  return TriggerWrap;\n}(React.Component);\n\nTriggerWrap.displayName = 'TriggerWrap';\nTriggerWrap.defaultProps = {\n  prefixCls: 'rc-trigger-popup',\n  getPopupClassNameFromAlign: returnEmptyString,\n  getDocument: returnDocument,\n  onPopupVisibleChange: noop,\n  afterPopupVisibleChange: noop,\n  onPopupAlign: noop,\n  popupClassName: '',\n  popupStyle: {},\n  destroyPopupOnHide: false,\n  popupAlign: {},\n  defaultPopupVisible: false,\n  mask: false,\n  maskClosable: true\n};\nexport default TriggerWrap;","map":null,"metadata":{},"sourceType":"module"}