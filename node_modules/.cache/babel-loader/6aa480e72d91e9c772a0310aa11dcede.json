{"ast":null,"code":"import _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _createClass from 'babel-runtime/helpers/createClass';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport React from 'react';\n\nfunction noop() {}\n\nfunction defaultParser(input) {\n  return input.replace(/[^\\w\\.-]+/g, '');\n}\n/**\n * When click and hold on a button - the speed of auto changin the value.\n */\n\n\nvar SPEED = 200;\n/**\n * When click and hold on a button - the delay before auto changin the value.\n */\n\nvar DELAY = 600;\n/**\n * Max Safe Integer -- on IE this is not available, so manually set the number in that case.\n * The reason this is used, instead of Infinity is because numbers above the MSI are unstable\n */\n\nvar MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || Math.pow(2, 53) - 1;\n\nvar BaseComponent = function (_React$Component) {\n  _inherits(BaseComponent, _React$Component);\n\n  function BaseComponent(props) {\n    _classCallCheck(this, BaseComponent);\n\n    var _this = _possibleConstructorReturn(this, (BaseComponent.__proto__ || Object.getPrototypeOf(BaseComponent)).call(this, props));\n\n    _this.onChange = function (e) {\n      var _this$props = _this.props,\n          parser = _this$props.parser,\n          onChange = _this$props.onChange;\n      var input = parser && parser(_this.getValueFromEvent(e).trim());\n\n      _this.setState({\n        inputValue: input\n      });\n\n      onChange && onChange(_this.toNumberWhenUserInput(input)); // valid number or invalid string\n    };\n\n    _this.onFocus = function () {\n      _this.setState({\n        focused: true\n      });\n\n      var onFocus = _this.props.onFocus;\n      onFocus && onFocus.apply(undefined, arguments);\n    };\n\n    _this.onBlur = function (e) {\n      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      _this.setState({\n        focused: false\n      });\n\n      var value = _this.getCurrentValidValue(_this.state.inputValue);\n\n      e.persist(); // fix https://github.com/react-component/input-number/issues/51\n\n      _this.setValue(value, function () {\n        var onBlur = _this.props.onBlur;\n        onBlur && onBlur.apply(undefined, [e].concat(args));\n      });\n    };\n\n    _this.getCurrentValidValue = function (value) {\n      var val = value;\n\n      if (val === '') {\n        val = '';\n      } else if (!_this.isNotCompleteNumber(val)) {\n        val = _this.getValidValue(val);\n      } else {\n        val = _this.state.value;\n      }\n\n      return _this.toNumber(val);\n    };\n\n    _this.getValidValue = function (value) {\n      var val = parseFloat(value); // https://github.com/ant-design/ant-design/issues/7358\n\n      if (isNaN(val)) {\n        return value;\n      }\n\n      if (val < _this.props.min) {\n        val = _this.props.min;\n      }\n\n      if (val > _this.props.max) {\n        val = _this.props.max;\n      }\n\n      return val;\n    };\n\n    _this.setValue = function (v, callback) {\n      // trigger onChange\n      var newValue = _this.isNotCompleteNumber(parseFloat(v)) ? undefined : parseFloat(v);\n      var changed = newValue !== _this.state.value || '' + newValue !== '' + _this.state.inputValue; // https://github.com/ant-design/ant-design/issues/7363\n\n      if (!('value' in _this.props)) {\n        _this.setState({\n          value: newValue,\n          inputValue: _this.toPrecisionAsStep(v)\n        }, callback);\n      } else {\n        // always set input value same as value\n        _this.setState({\n          inputValue: _this.toPrecisionAsStep(_this.state.value)\n        }, callback);\n      }\n\n      if (changed) {\n        var onChange = _this.props.onChange;\n        onChange && onChange(newValue);\n      }\n    };\n\n    _this.getPrecision = function (value) {\n      if ('precision' in _this.props) {\n        return _this.props.precision;\n      }\n\n      var valueString = value.toString();\n\n      if (valueString.indexOf('e-') >= 0) {\n        return parseInt(valueString.slice(valueString.indexOf('e-') + 2), 10);\n      }\n\n      var precision = 0;\n\n      if (valueString.indexOf('.') >= 0) {\n        precision = valueString.length - valueString.indexOf('.') - 1;\n      }\n\n      return precision;\n    }; // step={1.0} value={1.51}\n    // press +\n    // then value should be 2.51, rather than 2.5\n    // if this.props.precision is undefined\n    // https://github.com/react-component/input-number/issues/39\n\n\n    _this.getMaxPrecision = function (currentValue) {\n      var ratio = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n\n      if ('precision' in _this.props) {\n        return _this.props.precision;\n      }\n\n      var step = _this.props.step;\n\n      var ratioPrecision = _this.getPrecision(ratio);\n\n      var stepPrecision = _this.getPrecision(step);\n\n      var currentValuePrecision = _this.getPrecision(currentValue);\n\n      if (!currentValue) {\n        return ratioPrecision + stepPrecision;\n      }\n\n      return Math.max(currentValuePrecision, ratioPrecision + stepPrecision);\n    };\n\n    _this.getPrecisionFactor = function (currentValue) {\n      var ratio = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n\n      var precision = _this.getMaxPrecision(currentValue, ratio);\n\n      return Math.pow(10, precision);\n    };\n\n    _this.toPrecisionAsStep = function (num) {\n      if (_this.isNotCompleteNumber(num) || num === '') {\n        return num;\n      }\n\n      var precision = Math.abs(_this.getMaxPrecision(num));\n\n      if (!isNaN(precision)) {\n        return Number(num).toFixed(precision);\n      }\n\n      return num.toString();\n    }; // '1.' '1x' 'xx' '' => are not complete numbers\n\n\n    _this.isNotCompleteNumber = function (num) {\n      return isNaN(num) || num === '' || num === null || num && num.toString().indexOf('.') === num.toString().length - 1;\n    };\n\n    _this.toNumber = function (num) {\n      if (_this.isNotCompleteNumber(num)) {\n        return num;\n      }\n\n      if ('precision' in _this.props) {\n        return Number(Number(num).toFixed(_this.props.precision));\n      }\n\n      return Number(num);\n    }; // '1.0' '1.00'  => may be a inputing number\n\n\n    _this.toNumberWhenUserInput = function (num) {\n      // num.length > 16 => prevent input large number will became Infinity\n      if ((/\\.\\d*0$/.test(num) || num.length > 16) && _this.state.focused) {\n        return num;\n      }\n\n      return _this.toNumber(num);\n    };\n\n    _this.stepCompute = function (type, val, rat) {\n      var _this$props2 = _this.props,\n          step = _this$props2.step,\n          min = _this$props2.min;\n\n      var precisionFactor = _this.getPrecisionFactor(val, rat);\n\n      var precision = Math.abs(_this.getMaxPrecision(val, rat));\n      var result = void 0;\n      var direct = type === 'up' ? 1 : -1;\n\n      if (typeof val === 'number') {\n        result = ((precisionFactor * val + direct * precisionFactor * +step * rat) / precisionFactor).toFixed(precision);\n      } else {\n        result = min === -Infinity ? direct * +step : min;\n      }\n\n      return _this.toNumber(result);\n    };\n\n    _this.step = function (type, e) {\n      var ratio = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n\n      if (e) {\n        e.preventDefault();\n      }\n\n      var props = _this.props;\n\n      if (props.disabled) {\n        return false;\n      }\n\n      var value = _this.getCurrentValidValue(_this.state.inputValue) || 0;\n\n      if (_this.isNotCompleteNumber(value)) {\n        return false;\n      }\n\n      var val = _this.stepCompute(type, value, ratio);\n\n      var outOfRange = val > props.max || val < props.min;\n\n      if (val > props.max) {\n        val = props.max;\n      } else if (val < props.min) {\n        val = props.min;\n      }\n\n      _this.setValue(val);\n\n      _this.setState({\n        focused: true\n      });\n\n      return !outOfRange;\n    };\n\n    _this.stop = function () {\n      if (_this.autoStepTimer) {\n        clearTimeout(_this.autoStepTimer);\n      }\n    };\n\n    _this.action = function (type, e, ratio, recursive) {\n      if (e.persist) {\n        e.persist();\n      }\n\n      _this.stop();\n\n      if (_this.step(type, e, ratio)) {\n        _this.autoStepTimer = setTimeout(function () {\n          _this.action(type, e, ratio, true);\n        }, recursive ? SPEED : DELAY);\n      }\n    };\n\n    _this.down = function (e, ratio, recursive) {\n      _this.action('down', e, ratio, recursive);\n    };\n\n    _this.up = function (e, ratio, recursive) {\n      _this.action('up', e, ratio, recursive);\n    };\n\n    var value = void 0;\n\n    if ('value' in props) {\n      value = props.value;\n    } else {\n      value = props.defaultValue;\n    }\n\n    value = _this.toNumber(value);\n    _this.state = {\n      inputValue: _this.toPrecisionAsStep(value),\n      value: value,\n      focused: props.autoFocus\n    };\n    return _this;\n  }\n\n  _createClass(BaseComponent, [{\n    key: 'componentWillReceiveProps',\n    value: function componentWillReceiveProps(nextProps) {\n      if ('value' in nextProps) {\n        var value = this.state.focused ? nextProps.value : this.getValidValue(nextProps.value);\n        this.setState({\n          value: value,\n          inputValue: value\n        });\n      }\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      this.stop();\n    }\n  }]);\n\n  return BaseComponent;\n}(React.Component);\n\nexport default BaseComponent;\nBaseComponent.defaultProps = {\n  max: MAX_SAFE_INTEGER,\n  min: -MAX_SAFE_INTEGER,\n  step: 1,\n  style: {},\n  onChange: noop,\n  onFocus: noop,\n  onBlur: noop,\n  parser: defaultParser\n};\n;","map":null,"metadata":{},"sourceType":"module"}