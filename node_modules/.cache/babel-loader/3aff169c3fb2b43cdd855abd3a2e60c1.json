{"ast":null,"code":"import _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport * as React from 'react';\nimport { Models } from './DataTypes';\n\nvar SingleMonth = function (_React$PureComponent) {\n  _inherits(SingleMonth, _React$PureComponent);\n\n  function SingleMonth(props) {\n    _classCallCheck(this, SingleMonth);\n\n    var _this = _possibleConstructorReturn(this, _React$PureComponent.call(this, props));\n\n    _this.genWeek = function (weeksData, index) {\n      var _this$props = _this.props,\n          getDateExtra = _this$props.getDateExtra,\n          monthData = _this$props.monthData,\n          onCellClick = _this$props.onCellClick,\n          locale = _this$props.locale,\n          rowSize = _this$props.rowSize;\n      var rowCls = 'row';\n\n      if (rowSize === 'xl') {\n        rowCls += ' row-xl';\n      }\n\n      _this.state.weekComponents[index] = React.createElement('div', {\n        key: index,\n        className: rowCls\n      }, weeksData.map(function (day, dayOfWeek) {\n        var extra = getDateExtra && getDateExtra(new Date(day.tick)) || {};\n        var info = extra.info;\n        var disable = extra.disable || day.outOfDate;\n        var cls = 'date';\n        var lCls = 'left';\n        var rCls = 'right';\n        var infoCls = 'info';\n\n        if (dayOfWeek === 0 || dayOfWeek === 6) {\n          cls += ' grey';\n        }\n\n        if (disable) {\n          cls += ' disable';\n        } else if (info) {\n          cls += ' important';\n        }\n\n        if (day.selected) {\n          cls += ' date-selected';\n          var styleType = day.selected;\n\n          switch (styleType) {\n            case Models.SelectType.Only:\n              info = locale.begin;\n              infoCls += ' date-selected';\n              break;\n\n            case Models.SelectType.All:\n              info = locale.begin_over;\n              infoCls += ' date-selected';\n              break;\n\n            case Models.SelectType.Start:\n              info = locale.begin;\n              infoCls += ' date-selected';\n\n              if (dayOfWeek === 6 || day.isLastOfMonth) {\n                styleType = Models.SelectType.All;\n              }\n\n              break;\n\n            case Models.SelectType.Middle:\n              if (dayOfWeek === 0 || day.isFirstOfMonth) {\n                if (day.isLastOfMonth || dayOfWeek === 6) {\n                  styleType = Models.SelectType.All;\n                } else {\n                  styleType = Models.SelectType.Start;\n                }\n              } else if (dayOfWeek === 6 || day.isLastOfMonth) {\n                styleType = Models.SelectType.End;\n              }\n\n              break;\n\n            case Models.SelectType.End:\n              info = locale.over;\n              infoCls += ' date-selected';\n\n              if (dayOfWeek === 0 || day.isFirstOfMonth) {\n                styleType = Models.SelectType.All;\n              }\n\n              break;\n          }\n\n          switch (styleType) {\n            case Models.SelectType.Single:\n            case Models.SelectType.Only:\n            case Models.SelectType.All:\n              cls += ' selected-single';\n              break;\n\n            case Models.SelectType.Start:\n              cls += ' selected-start';\n              rCls += ' date-selected';\n              break;\n\n            case Models.SelectType.Middle:\n              cls += ' selected-middle';\n              lCls += ' date-selected';\n              rCls += ' date-selected';\n              break;\n\n            case Models.SelectType.End:\n              cls += ' selected-end';\n              lCls += ' date-selected';\n              break;\n          }\n        }\n\n        var defaultContent = [React.createElement('div', {\n          key: 'wrapper',\n          className: 'date-wrapper'\n        }, React.createElement('span', {\n          className: lCls\n        }), React.createElement('div', {\n          className: cls\n        }, day.dayOfMonth), React.createElement('span', {\n          className: rCls\n        })), React.createElement('div', {\n          key: 'info',\n          className: infoCls\n        }, info)];\n        return React.createElement('div', {\n          key: dayOfWeek,\n          className: 'cell ' + (extra.cellCls || ''),\n          onClick: function onClick() {\n            !disable && onCellClick && onCellClick(day, monthData);\n          }\n        }, extra.cellRender ? extra.cellRender(new Date(day.tick)) : defaultContent);\n      }));\n    };\n\n    _this.updateWeeks = function (monthData) {\n      (monthData || _this.props.monthData).weeks.forEach(function (week, index) {\n        _this.genWeek(week, index);\n      });\n    };\n\n    _this.setWarpper = function (dom) {\n      _this.wrapperDivDOM = dom;\n    };\n\n    _this.state = {\n      weekComponents: []\n    };\n    return _this;\n  }\n\n  SingleMonth.prototype.componentWillMount = function componentWillMount() {\n    var _this2 = this;\n\n    this.props.monthData.weeks.forEach(function (week, index) {\n      _this2.genWeek(week, index);\n    });\n  };\n\n  SingleMonth.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {\n    if (this.props.monthData !== nextProps.monthData) {\n      this.updateWeeks(nextProps.monthData);\n    }\n  };\n\n  SingleMonth.prototype.render = function render() {\n    var title = this.props.monthData.title;\n    var weekComponents = this.state.weekComponents;\n    return React.createElement('div', {\n      className: 'single-month',\n      ref: this.setWarpper\n    }, React.createElement('div', {\n      className: 'month-title'\n    }, title), React.createElement('div', {\n      className: 'date'\n    }, weekComponents));\n  };\n\n  return SingleMonth;\n}(React.PureComponent);\n\nexport default SingleMonth;\nSingleMonth.defaultProps = {\n  rowSize: 'normal'\n};","map":null,"metadata":{},"sourceType":"module"}