{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _createClass from 'babel-runtime/helpers/createClass';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport React from 'react';\nimport ReactDOM, { findDOMNode } from 'react-dom';\nimport contains from 'rc-util/es/Dom/contains';\nimport addEventListener from 'rc-util/lib/Dom/addEventListener';\nimport Popup from './Popup';\nimport { getAlignFromPlacement, getPopupClassNameFromAlign } from './utils';\nvar IS_REACT_16 = !!React.createPortal;\n\nfunction noop() {}\n\nfunction returnEmptyString() {\n  return '';\n}\n\nfunction returnDocument() {\n  return window.document;\n}\n\nvar Trigger = function (_React$Component) {\n  _inherits(Trigger, _React$Component);\n\n  function Trigger() {\n    _classCallCheck(this, Trigger);\n\n    var _this = _possibleConstructorReturn(this, (Trigger.__proto__ || Object.getPrototypeOf(Trigger)).apply(this, arguments));\n\n    _this.onDocumentClick = function (event) {\n      if (_this.props.mask && !_this.props.maskClosable) {\n        return;\n      }\n\n      var target = event.target;\n      var root = findDOMNode(_this);\n\n      var popupNode = _this.getPopupDomNode();\n\n      if (!contains(root, target) && !contains(popupNode, target)) {\n        _this.close();\n      }\n    };\n\n    _this.getPopupAlign = function () {\n      var props = _this.props;\n      var popupPlacement = props.popupPlacement,\n          popupAlign = props.popupAlign,\n          builtinPlacements = props.builtinPlacements;\n\n      if (popupPlacement && builtinPlacements) {\n        return getAlignFromPlacement(builtinPlacements, popupPlacement, popupAlign);\n      }\n\n      return popupAlign;\n    };\n\n    _this.getRootDomNode = function () {\n      return findDOMNode(_this);\n    };\n\n    _this.getPopupClassNameFromAlign = function (align) {\n      var className = [];\n      var props = _this.props;\n      var popupPlacement = props.popupPlacement,\n          builtinPlacements = props.builtinPlacements,\n          prefixCls = props.prefixCls;\n\n      if (popupPlacement && builtinPlacements) {\n        className.push(getPopupClassNameFromAlign(builtinPlacements, prefixCls, align));\n      }\n\n      if (props.getPopupClassNameFromAlign) {\n        className.push(props.getPopupClassNameFromAlign(align));\n      }\n\n      return className.join(' ');\n    };\n\n    _this.close = function () {\n      if (_this.props.onClose) {\n        _this.props.onClose();\n      }\n    };\n\n    _this.onAnimateLeave = function () {\n      if (_this.props.destroyPopupOnHide) {\n        var container = _this._container;\n\n        if (container) {\n          ReactDOM.unmountComponentAtNode(container);\n          container.parentNode.removeChild(container);\n        }\n      }\n    };\n\n    _this.removeContainer = function () {\n      var container = document.querySelector('#' + _this.props.prefixCls + '-container');\n\n      if (container) {\n        ReactDOM.unmountComponentAtNode(container);\n        container.parentNode.removeChild(container);\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(Trigger, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      if (this.props.visible) {\n        this.componentDidUpdate();\n      }\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      if (this.props.visible) {\n        if (!IS_REACT_16) {\n          this.renderDialog(false);\n        }\n      }\n\n      this.clearOutsideHandler();\n    }\n  }, {\n    key: 'componentDidUpdate',\n    value: function componentDidUpdate() {\n      var _this2 = this;\n\n      if (!IS_REACT_16) {\n        this.renderDialog(this.props.visible);\n      }\n\n      if (this.props.visible) {\n        if (!this.touchOutsideHandler) {\n          this.touchOutsideHandler = setTimeout(function () {\n            var currentDocument = _this2.props.getDocument();\n\n            _this2.touchOutsideHandler = addEventListener(currentDocument, 'touchend', _this2.onDocumentClick);\n          });\n        }\n\n        return;\n      }\n\n      this.clearOutsideHandler();\n    }\n  }, {\n    key: 'clearOutsideHandler',\n    value: function clearOutsideHandler() {\n      if (this.touchOutsideHandler) {\n        if (this.touchOutsideHandler.remove) {\n          this.touchOutsideHandler.remove();\n        }\n\n        this.touchOutsideHandler = null;\n      }\n    }\n  }, {\n    key: 'getPopupDomNode',\n    value: function getPopupDomNode() {\n      if (this._component && this._component.getPopupDomNode) {\n        return this._component.getPopupDomNode();\n      }\n\n      return null;\n    }\n  }, {\n    key: 'saveRef',\n    value: function saveRef(el, visible) {\n      this.popupRef = el;\n      this._component = el;\n      this.props.afterPopupVisibleChange(visible);\n    }\n  }, {\n    key: 'getComponent',\n    value: function getComponent(visible) {\n      var _this3 = this;\n\n      var props = _extends({}, this.props);\n\n      ['visible', 'onAnimateLeave'].forEach(function (key) {\n        if (props.hasOwnProperty(key)) {\n          delete props[key];\n        }\n      });\n      return React.createElement(Popup, {\n        key: 'popup',\n        ref: function ref(el) {\n          return _this3.saveRef(el, visible);\n        },\n        prefixCls: props.prefixCls,\n        destroyPopupOnHide: props.destroyPopupOnHide,\n        visible: visible,\n        className: props.popupClassName,\n        align: this.getPopupAlign(),\n        onAlign: props.onPopupAlign,\n        animation: props.popupAnimation,\n        getClassNameFromAlign: this.getPopupClassNameFromAlign,\n        getRootDomNode: this.getRootDomNode,\n        style: props.popupStyle,\n        mask: props.mask,\n        zIndex: props.zIndex,\n        transitionName: props.popupTransitionName,\n        maskAnimation: props.maskAnimation,\n        maskTransitionName: props.maskTransitionName,\n        onAnimateLeave: this.onAnimateLeave\n      }, typeof props.popup === 'function' ? props.popup() : props.popup);\n    }\n  }, {\n    key: 'getContainer',\n    value: function getContainer() {\n      if (!this._container) {\n        var props = this.props;\n        var popupContainer = document.createElement('div');\n        popupContainer.style.position = 'absolute';\n        popupContainer.style.top = '0';\n        popupContainer.style.left = '0';\n        popupContainer.style.width = '100%';\n        var mountNode = props.getPopupContainer ? props.getPopupContainer(findDOMNode(this)) : props.getDocument().body;\n        mountNode.appendChild(popupContainer);\n        this._container = popupContainer;\n      }\n\n      return this._container;\n    }\n  }, {\n    key: 'renderDialog',\n    value: function renderDialog(visible) {\n      ReactDOM.unstable_renderSubtreeIntoContainer(this, this.getComponent(visible), this.getContainer());\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var props = this.props;\n      var children = props.children;\n      var child = React.Children.only(children);\n      var newChildProps = {\n        onClick: this.props.onTargetClick,\n        key: 'trigger'\n      };\n      var trigger = React.cloneElement(child, newChildProps);\n\n      if (!IS_REACT_16) {\n        return trigger;\n      }\n\n      var portal = void 0;\n\n      if (props.visible || this._component) {\n        portal = ReactDOM.createPortal(this.getComponent(props.visible), this.getContainer());\n      }\n\n      return [trigger, portal];\n    }\n  }]);\n\n  return Trigger;\n}(React.Component);\n\nexport default Trigger;\nTrigger.defaultProps = {\n  prefixCls: 'rc-trigger-popup',\n  getPopupClassNameFromAlign: returnEmptyString,\n  getDocument: returnDocument,\n  onPopupVisibleChange: noop,\n  afterPopupVisibleChange: noop,\n  onPopupAlign: noop,\n  popupClassName: '',\n  popupStyle: {},\n  destroyPopupOnHide: false,\n  popupAlign: {},\n  defaultPopupVisible: false,\n  mask: false,\n  maskClosable: true\n};","map":null,"metadata":{},"sourceType":"module"}